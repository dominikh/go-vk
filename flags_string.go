// Code generated by "stringer -output flags_string.go -type=PresentModeKHR,CommandBufferLevel,ColorSpaceKHR,Format,StructureType,Result,PhysicalDeviceType,SharingMode,ImageViewType,ComponentSwizzle,VertexInputRate,PrimitiveTopology,PolygonMode,FrontFace,BlendFactor,BlendOp,LogicOp,DynamicState,CompareOp,StencilOp,AttachmentLoadOp,AttachmentStoreOp,ImageLayout,PipelineBindPoint,SubpassContents,ImageTiling,ImageType,IndexType,QueryType,Filter,SamplerAddressMode,SamplerMipmapMode,BorderColor,DescriptorType"; DO NOT EDIT.

package vk

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PresentModeImmediateKHR-0]
	_ = x[PresentModeMailboxKHR-1]
	_ = x[PresentModeFifoKHR-2]
	_ = x[PresentModeFifoRelaxedKHR-3]
	_ = x[PresentModeSharedDemandRefreshKHR-1000111000]
	_ = x[PresentModeSharedContinuousRefreshKHR-1000111001]
}

const (
	_PresentModeKHR_name_0 = "PresentModeImmediateKHRPresentModeMailboxKHRPresentModeFifoKHRPresentModeFifoRelaxedKHR"
	_PresentModeKHR_name_1 = "PresentModeSharedDemandRefreshKHRPresentModeSharedContinuousRefreshKHR"
)

var (
	_PresentModeKHR_index_0 = [...]uint8{0, 23, 44, 62, 87}
	_PresentModeKHR_index_1 = [...]uint8{0, 33, 70}
)

func (i PresentModeKHR) String() string {
	switch {
	case i <= 3:
		return _PresentModeKHR_name_0[_PresentModeKHR_index_0[i]:_PresentModeKHR_index_0[i+1]]
	case 1000111000 <= i && i <= 1000111001:
		i -= 1000111000
		return _PresentModeKHR_name_1[_PresentModeKHR_index_1[i]:_PresentModeKHR_index_1[i+1]]
	default:
		return "PresentModeKHR(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CommandBufferLevelPrimary-0]
	_ = x[CommandBufferLevelSecondary-1]
}

const _CommandBufferLevel_name = "CommandBufferLevelPrimaryCommandBufferLevelSecondary"

var _CommandBufferLevel_index = [...]uint8{0, 25, 52}

func (i CommandBufferLevel) String() string {
	if i >= CommandBufferLevel(len(_CommandBufferLevel_index)-1) {
		return "CommandBufferLevel(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _CommandBufferLevel_name[_CommandBufferLevel_index[i]:_CommandBufferLevel_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[COLOR_SPACE_SRGB_NONLINEAR_KHR-0]
}

const _ColorSpaceKHR_name = "COLOR_SPACE_SRGB_NONLINEAR_KHR"

var _ColorSpaceKHR_index = [...]uint8{0, 30}

func (i ColorSpaceKHR) String() string {
	if i >= ColorSpaceKHR(len(_ColorSpaceKHR_index)-1) {
		return "ColorSpaceKHR(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ColorSpaceKHR_name[_ColorSpaceKHR_index[i]:_ColorSpaceKHR_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[FormatUndefined-0]
	_ = x[FormatR4G4_UNORM_PACK8-1]
	_ = x[FormatR4G4B4A4_UNORM_PACK16-2]
	_ = x[FormatB4G4R4A4_UNORM_PACK16-3]
	_ = x[FormatR5G6B5_UNORM_PACK16-4]
	_ = x[FormatB5G6R5_UNORM_PACK16-5]
	_ = x[FormatR5G5B5A1_UNORM_PACK16-6]
	_ = x[FormatB5G5R5A1_UNORM_PACK16-7]
	_ = x[FormatA1R5G5B5_UNORM_PACK16-8]
	_ = x[FormatR8_UNORM-9]
	_ = x[FormatR8_SNORM-10]
	_ = x[FormatR8_USCALED-11]
	_ = x[FormatR8_SSCALED-12]
	_ = x[FormatR8_UINT-13]
	_ = x[FormatR8_SINT-14]
	_ = x[FormatR8_SRGB-15]
	_ = x[FormatR8G8_UNORM-16]
	_ = x[FormatR8G8_SNORM-17]
	_ = x[FormatR8G8_USCALED-18]
	_ = x[FormatR8G8_SSCALED-19]
	_ = x[FormatR8G8_UINT-20]
	_ = x[FormatR8G8_SINT-21]
	_ = x[FormatR8G8_SRGB-22]
	_ = x[FormatR8G8B8_UNORM-23]
	_ = x[FormatR8G8B8_SNORM-24]
	_ = x[FormatR8G8B8_USCALED-25]
	_ = x[FormatR8G8B8_SSCALED-26]
	_ = x[FormatR8G8B8_UINT-27]
	_ = x[FormatR8G8B8_SINT-28]
	_ = x[FormatR8G8B8_SRGB-29]
	_ = x[FormatB8G8R8_UNORM-30]
	_ = x[FormatB8G8R8_SNORM-31]
	_ = x[FormatB8G8R8_USCALED-32]
	_ = x[FormatB8G8R8_SSCALED-33]
	_ = x[FormatB8G8R8_UINT-34]
	_ = x[FormatB8G8R8_SINT-35]
	_ = x[FormatB8G8R8_SRGB-36]
	_ = x[FormatR8G8B8A8_UNORM-37]
	_ = x[FormatR8G8B8A8_SNORM-38]
	_ = x[FormatR8G8B8A8_USCALED-39]
	_ = x[FormatR8G8B8A8_SSCALED-40]
	_ = x[FormatR8G8B8A8_UINT-41]
	_ = x[FormatR8G8B8A8_SINT-42]
	_ = x[FormatR8G8B8A8_SRGB-43]
	_ = x[FormatB8G8R8A8_UNORM-44]
	_ = x[FormatB8G8R8A8_SNORM-45]
	_ = x[FormatB8G8R8A8_USCALED-46]
	_ = x[FormatB8G8R8A8_SSCALED-47]
	_ = x[FormatB8G8R8A8_UINT-48]
	_ = x[FormatB8G8R8A8_SINT-49]
	_ = x[FormatB8G8R8A8_SRGB-50]
	_ = x[FormatA8B8G8R8_UNORM_PACK32-51]
	_ = x[FormatA8B8G8R8_SNORM_PACK32-52]
	_ = x[FormatA8B8G8R8_USCALED_PACK32-53]
	_ = x[FormatA8B8G8R8_SSCALED_PACK32-54]
	_ = x[FormatA8B8G8R8_UINT_PACK32-55]
	_ = x[FormatA8B8G8R8_SINT_PACK32-56]
	_ = x[FormatA8B8G8R8_SRGB_PACK32-57]
	_ = x[FormatA2R10G10B10_UNORM_PACK32-58]
	_ = x[FormatA2R10G10B10_SNORM_PACK32-59]
	_ = x[FormatA2R10G10B10_USCALED_PACK32-60]
	_ = x[FormatA2R10G10B10_SSCALED_PACK32-61]
	_ = x[FormatA2R10G10B10_UINT_PACK32-62]
	_ = x[FormatA2R10G10B10_SINT_PACK32-63]
	_ = x[FormatA2B10G10R10_UNORM_PACK32-64]
	_ = x[FormatA2B10G10R10_SNORM_PACK32-65]
	_ = x[FormatA2B10G10R10_USCALED_PACK32-66]
	_ = x[FormatA2B10G10R10_SSCALED_PACK32-67]
	_ = x[FormatA2B10G10R10_UINT_PACK32-68]
	_ = x[FormatA2B10G10R10_SINT_PACK32-69]
	_ = x[FormatR16_UNORM-70]
	_ = x[FormatR16_SNORM-71]
	_ = x[FormatR16_USCALED-72]
	_ = x[FormatR16_SSCALED-73]
	_ = x[FormatR16_UINT-74]
	_ = x[FormatR16_SINT-75]
	_ = x[FormatR16_SFLOAT-76]
	_ = x[FormatR16G16_UNORM-77]
	_ = x[FormatR16G16_SNORM-78]
	_ = x[FormatR16G16_USCALED-79]
	_ = x[FormatR16G16_SSCALED-80]
	_ = x[FormatR16G16_UINT-81]
	_ = x[FormatR16G16_SINT-82]
	_ = x[FormatR16G16_SFLOAT-83]
	_ = x[FormatR16G16B16_UNORM-84]
	_ = x[FormatR16G16B16_SNORM-85]
	_ = x[FormatR16G16B16_USCALED-86]
	_ = x[FormatR16G16B16_SSCALED-87]
	_ = x[FormatR16G16B16_UINT-88]
	_ = x[FormatR16G16B16_SINT-89]
	_ = x[FormatR16G16B16_SFLOAT-90]
	_ = x[FormatR16G16B16A16_UNORM-91]
	_ = x[FormatR16G16B16A16_SNORM-92]
	_ = x[FormatR16G16B16A16_USCALED-93]
	_ = x[FormatR16G16B16A16_SSCALED-94]
	_ = x[FormatR16G16B16A16_UINT-95]
	_ = x[FormatR16G16B16A16_SINT-96]
	_ = x[FormatR16G16B16A16_SFLOAT-97]
	_ = x[FormatR32_UINT-98]
	_ = x[FormatR32_SINT-99]
	_ = x[FormatR32_SFLOAT-100]
	_ = x[FormatR32G32_UINT-101]
	_ = x[FormatR32G32_SINT-102]
	_ = x[FormatR32G32_SFLOAT-103]
	_ = x[FormatR32G32B32_UINT-104]
	_ = x[FormatR32G32B32_SINT-105]
	_ = x[FormatR32G32B32_SFLOAT-106]
	_ = x[FormatR32G32B32A32_UINT-107]
	_ = x[FormatR32G32B32A32_SINT-108]
	_ = x[FormatR32G32B32A32_SFLOAT-109]
	_ = x[FormatR64_UINT-110]
	_ = x[FormatR64_SINT-111]
	_ = x[FormatR64_SFLOAT-112]
	_ = x[FormatR64G64_UINT-113]
	_ = x[FormatR64G64_SINT-114]
	_ = x[FormatR64G64_SFLOAT-115]
	_ = x[FormatR64G64B64_UINT-116]
	_ = x[FormatR64G64B64_SINT-117]
	_ = x[FormatR64G64B64_SFLOAT-118]
	_ = x[FormatR64G64B64A64_UINT-119]
	_ = x[FormatR64G64B64A64_SINT-120]
	_ = x[FormatR64G64B64A64_SFLOAT-121]
	_ = x[FormatB10G11R11_UFLOAT_PACK32-122]
	_ = x[FormatE5B9G9R9_UFLOAT_PACK32-123]
	_ = x[FormatD16_UNORM-124]
	_ = x[FormatX8_D24_UNORM_PACK32-125]
	_ = x[FormatD32_SFLOAT-126]
	_ = x[FormatS8_UINT-127]
	_ = x[FormatD16_UNORM_S8_UINT-128]
	_ = x[FormatD24_UNORM_S8_UINT-129]
	_ = x[FormatD32_SFLOAT_S8_UINT-130]
	_ = x[FormatBC1_RGB_UNORM_BLOCK-131]
	_ = x[FormatBC1_RGB_SRGB_BLOCK-132]
	_ = x[FormatBC1_RGBA_UNORM_BLOCK-133]
	_ = x[FormatBC1_RGBA_SRGB_BLOCK-134]
	_ = x[FormatBC2_UNORM_BLOCK-135]
	_ = x[FormatBC2_SRGB_BLOCK-136]
	_ = x[FormatBC3_UNORM_BLOCK-137]
	_ = x[FormatBC3_SRGB_BLOCK-138]
	_ = x[FormatBC4_UNORM_BLOCK-139]
	_ = x[FormatBC4_SNORM_BLOCK-140]
	_ = x[FormatBC5_UNORM_BLOCK-141]
	_ = x[FormatBC5_SNORM_BLOCK-142]
	_ = x[FormatBC6H_UFLOAT_BLOCK-143]
	_ = x[FormatBC6H_SFLOAT_BLOCK-144]
	_ = x[FormatBC7_UNORM_BLOCK-145]
	_ = x[FormatBC7_SRGB_BLOCK-146]
	_ = x[FormatETC2_R8G8B8_UNORM_BLOCK-147]
	_ = x[FormatETC2_R8G8B8_SRGB_BLOCK-148]
	_ = x[FormatETC2_R8G8B8A1_UNORM_BLOCK-149]
	_ = x[FormatETC2_R8G8B8A1_SRGB_BLOCK-150]
	_ = x[FormatETC2_R8G8B8A8_UNORM_BLOCK-151]
	_ = x[FormatETC2_R8G8B8A8_SRGB_BLOCK-152]
	_ = x[FormatEAC_R11_UNORM_BLOCK-153]
	_ = x[FormatEAC_R11_SNORM_BLOCK-154]
	_ = x[FormatEAC_R11G11_UNORM_BLOCK-155]
	_ = x[FormatEAC_R11G11_SNORM_BLOCK-156]
	_ = x[FormatASTC_4x4_UNORM_BLOCK-157]
	_ = x[FormatASTC_4x4_SRGB_BLOCK-158]
	_ = x[FormatASTC_5x4_UNORM_BLOCK-159]
	_ = x[FormatASTC_5x4_SRGB_BLOCK-160]
	_ = x[FormatASTC_5x5_UNORM_BLOCK-161]
	_ = x[FormatASTC_5x5_SRGB_BLOCK-162]
	_ = x[FormatASTC_6x5_UNORM_BLOCK-163]
	_ = x[FormatASTC_6x5_SRGB_BLOCK-164]
	_ = x[FormatASTC_6x6_UNORM_BLOCK-165]
	_ = x[FormatASTC_6x6_SRGB_BLOCK-166]
	_ = x[FormatASTC_8x5_UNORM_BLOCK-167]
	_ = x[FormatASTC_8x5_SRGB_BLOCK-168]
	_ = x[FormatASTC_8x6_UNORM_BLOCK-169]
	_ = x[FormatASTC_8x6_SRGB_BLOCK-170]
	_ = x[FormatASTC_8x8_UNORM_BLOCK-171]
	_ = x[FormatASTC_8x8_SRGB_BLOCK-172]
	_ = x[FormatASTC_10x5_UNORM_BLOCK-173]
	_ = x[FormatASTC_10x5_SRGB_BLOCK-174]
	_ = x[FormatASTC_10x6_UNORM_BLOCK-175]
	_ = x[FormatASTC_10x6_SRGB_BLOCK-176]
	_ = x[FormatASTC_10x8_UNORM_BLOCK-177]
	_ = x[FormatASTC_10x8_SRGB_BLOCK-178]
	_ = x[FormatASTC_10x10_UNORM_BLOCK-179]
	_ = x[FormatASTC_10x10_SRGB_BLOCK-180]
	_ = x[FormatASTC_12x10_UNORM_BLOCK-181]
	_ = x[FormatASTC_12x10_SRGB_BLOCK-182]
	_ = x[FormatASTC_12x12_UNORM_BLOCK-183]
	_ = x[FormatASTC_12x12_SRGB_BLOCK-184]
}

const _Format_name = "FormatUndefinedFormatR4G4_UNORM_PACK8FormatR4G4B4A4_UNORM_PACK16FormatB4G4R4A4_UNORM_PACK16FormatR5G6B5_UNORM_PACK16FormatB5G6R5_UNORM_PACK16FormatR5G5B5A1_UNORM_PACK16FormatB5G5R5A1_UNORM_PACK16FormatA1R5G5B5_UNORM_PACK16FormatR8_UNORMFormatR8_SNORMFormatR8_USCALEDFormatR8_SSCALEDFormatR8_UINTFormatR8_SINTFormatR8_SRGBFormatR8G8_UNORMFormatR8G8_SNORMFormatR8G8_USCALEDFormatR8G8_SSCALEDFormatR8G8_UINTFormatR8G8_SINTFormatR8G8_SRGBFormatR8G8B8_UNORMFormatR8G8B8_SNORMFormatR8G8B8_USCALEDFormatR8G8B8_SSCALEDFormatR8G8B8_UINTFormatR8G8B8_SINTFormatR8G8B8_SRGBFormatB8G8R8_UNORMFormatB8G8R8_SNORMFormatB8G8R8_USCALEDFormatB8G8R8_SSCALEDFormatB8G8R8_UINTFormatB8G8R8_SINTFormatB8G8R8_SRGBFormatR8G8B8A8_UNORMFormatR8G8B8A8_SNORMFormatR8G8B8A8_USCALEDFormatR8G8B8A8_SSCALEDFormatR8G8B8A8_UINTFormatR8G8B8A8_SINTFormatR8G8B8A8_SRGBFormatB8G8R8A8_UNORMFormatB8G8R8A8_SNORMFormatB8G8R8A8_USCALEDFormatB8G8R8A8_SSCALEDFormatB8G8R8A8_UINTFormatB8G8R8A8_SINTFormatB8G8R8A8_SRGBFormatA8B8G8R8_UNORM_PACK32FormatA8B8G8R8_SNORM_PACK32FormatA8B8G8R8_USCALED_PACK32FormatA8B8G8R8_SSCALED_PACK32FormatA8B8G8R8_UINT_PACK32FormatA8B8G8R8_SINT_PACK32FormatA8B8G8R8_SRGB_PACK32FormatA2R10G10B10_UNORM_PACK32FormatA2R10G10B10_SNORM_PACK32FormatA2R10G10B10_USCALED_PACK32FormatA2R10G10B10_SSCALED_PACK32FormatA2R10G10B10_UINT_PACK32FormatA2R10G10B10_SINT_PACK32FormatA2B10G10R10_UNORM_PACK32FormatA2B10G10R10_SNORM_PACK32FormatA2B10G10R10_USCALED_PACK32FormatA2B10G10R10_SSCALED_PACK32FormatA2B10G10R10_UINT_PACK32FormatA2B10G10R10_SINT_PACK32FormatR16_UNORMFormatR16_SNORMFormatR16_USCALEDFormatR16_SSCALEDFormatR16_UINTFormatR16_SINTFormatR16_SFLOATFormatR16G16_UNORMFormatR16G16_SNORMFormatR16G16_USCALEDFormatR16G16_SSCALEDFormatR16G16_UINTFormatR16G16_SINTFormatR16G16_SFLOATFormatR16G16B16_UNORMFormatR16G16B16_SNORMFormatR16G16B16_USCALEDFormatR16G16B16_SSCALEDFormatR16G16B16_UINTFormatR16G16B16_SINTFormatR16G16B16_SFLOATFormatR16G16B16A16_UNORMFormatR16G16B16A16_SNORMFormatR16G16B16A16_USCALEDFormatR16G16B16A16_SSCALEDFormatR16G16B16A16_UINTFormatR16G16B16A16_SINTFormatR16G16B16A16_SFLOATFormatR32_UINTFormatR32_SINTFormatR32_SFLOATFormatR32G32_UINTFormatR32G32_SINTFormatR32G32_SFLOATFormatR32G32B32_UINTFormatR32G32B32_SINTFormatR32G32B32_SFLOATFormatR32G32B32A32_UINTFormatR32G32B32A32_SINTFormatR32G32B32A32_SFLOATFormatR64_UINTFormatR64_SINTFormatR64_SFLOATFormatR64G64_UINTFormatR64G64_SINTFormatR64G64_SFLOATFormatR64G64B64_UINTFormatR64G64B64_SINTFormatR64G64B64_SFLOATFormatR64G64B64A64_UINTFormatR64G64B64A64_SINTFormatR64G64B64A64_SFLOATFormatB10G11R11_UFLOAT_PACK32FormatE5B9G9R9_UFLOAT_PACK32FormatD16_UNORMFormatX8_D24_UNORM_PACK32FormatD32_SFLOATFormatS8_UINTFormatD16_UNORM_S8_UINTFormatD24_UNORM_S8_UINTFormatD32_SFLOAT_S8_UINTFormatBC1_RGB_UNORM_BLOCKFormatBC1_RGB_SRGB_BLOCKFormatBC1_RGBA_UNORM_BLOCKFormatBC1_RGBA_SRGB_BLOCKFormatBC2_UNORM_BLOCKFormatBC2_SRGB_BLOCKFormatBC3_UNORM_BLOCKFormatBC3_SRGB_BLOCKFormatBC4_UNORM_BLOCKFormatBC4_SNORM_BLOCKFormatBC5_UNORM_BLOCKFormatBC5_SNORM_BLOCKFormatBC6H_UFLOAT_BLOCKFormatBC6H_SFLOAT_BLOCKFormatBC7_UNORM_BLOCKFormatBC7_SRGB_BLOCKFormatETC2_R8G8B8_UNORM_BLOCKFormatETC2_R8G8B8_SRGB_BLOCKFormatETC2_R8G8B8A1_UNORM_BLOCKFormatETC2_R8G8B8A1_SRGB_BLOCKFormatETC2_R8G8B8A8_UNORM_BLOCKFormatETC2_R8G8B8A8_SRGB_BLOCKFormatEAC_R11_UNORM_BLOCKFormatEAC_R11_SNORM_BLOCKFormatEAC_R11G11_UNORM_BLOCKFormatEAC_R11G11_SNORM_BLOCKFormatASTC_4x4_UNORM_BLOCKFormatASTC_4x4_SRGB_BLOCKFormatASTC_5x4_UNORM_BLOCKFormatASTC_5x4_SRGB_BLOCKFormatASTC_5x5_UNORM_BLOCKFormatASTC_5x5_SRGB_BLOCKFormatASTC_6x5_UNORM_BLOCKFormatASTC_6x5_SRGB_BLOCKFormatASTC_6x6_UNORM_BLOCKFormatASTC_6x6_SRGB_BLOCKFormatASTC_8x5_UNORM_BLOCKFormatASTC_8x5_SRGB_BLOCKFormatASTC_8x6_UNORM_BLOCKFormatASTC_8x6_SRGB_BLOCKFormatASTC_8x8_UNORM_BLOCKFormatASTC_8x8_SRGB_BLOCKFormatASTC_10x5_UNORM_BLOCKFormatASTC_10x5_SRGB_BLOCKFormatASTC_10x6_UNORM_BLOCKFormatASTC_10x6_SRGB_BLOCKFormatASTC_10x8_UNORM_BLOCKFormatASTC_10x8_SRGB_BLOCKFormatASTC_10x10_UNORM_BLOCKFormatASTC_10x10_SRGB_BLOCKFormatASTC_12x10_UNORM_BLOCKFormatASTC_12x10_SRGB_BLOCKFormatASTC_12x12_UNORM_BLOCKFormatASTC_12x12_SRGB_BLOCK"

var _Format_index = [...]uint16{0, 15, 37, 64, 91, 116, 141, 168, 195, 222, 236, 250, 266, 282, 295, 308, 321, 337, 353, 371, 389, 404, 419, 434, 452, 470, 490, 510, 527, 544, 561, 579, 597, 617, 637, 654, 671, 688, 708, 728, 750, 772, 791, 810, 829, 849, 869, 891, 913, 932, 951, 970, 997, 1024, 1053, 1082, 1108, 1134, 1160, 1190, 1220, 1252, 1284, 1313, 1342, 1372, 1402, 1434, 1466, 1495, 1524, 1539, 1554, 1571, 1588, 1602, 1616, 1632, 1650, 1668, 1688, 1708, 1725, 1742, 1761, 1782, 1803, 1826, 1849, 1869, 1889, 1911, 1935, 1959, 1985, 2011, 2034, 2057, 2082, 2096, 2110, 2126, 2143, 2160, 2179, 2199, 2219, 2241, 2264, 2287, 2312, 2326, 2340, 2356, 2373, 2390, 2409, 2429, 2449, 2471, 2494, 2517, 2542, 2571, 2599, 2614, 2639, 2655, 2668, 2691, 2714, 2738, 2763, 2787, 2813, 2838, 2859, 2879, 2900, 2920, 2941, 2962, 2983, 3004, 3027, 3050, 3071, 3091, 3120, 3148, 3179, 3209, 3240, 3270, 3295, 3320, 3348, 3376, 3402, 3427, 3453, 3478, 3504, 3529, 3555, 3580, 3606, 3631, 3657, 3682, 3708, 3733, 3759, 3784, 3811, 3837, 3864, 3890, 3917, 3943, 3971, 3998, 4026, 4053, 4081, 4108}

func (i Format) String() string {
	if i >= Format(len(_Format_index)-1) {
		return "Format(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Format_name[_Format_index[i]:_Format_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[StructureTypeAcquireNextImageInfoKHR-1000060010]
	_ = x[StructureTypeAndroidHardwareBufferFormatPropertiesAndroid-1000129002]
	_ = x[StructureTypeAndroidHardwareBufferPropertiesAndroid-1000129001]
	_ = x[StructureTypeAndroidHardwareBufferUsageAndroid-1000129000]
	_ = x[StructureTypeAndroidSurfaceCreateInfoKHR-1000008000]
	_ = x[StructureTypeAttachmentDescription2KHR-1000109000]
	_ = x[StructureTypeAttachmentReference2KHR-1000109001]
	_ = x[StructureTypeApplicationInfo-0]
	_ = x[StructureTypeBindBufferMemoryDeviceGroupInfoKHR-1000060013]
	_ = x[StructureTypeBindBufferMemoryInfoKHR-1000157000]
	_ = x[StructureTypeBindImageMemoryDeviceGroupInfoKHR-1000060014]
	_ = x[StructureTypeBindImageMemoryInfoKHR-1000157001]
	_ = x[StructureTypeBindImageMemorySwapchainInfoKHR-1000060009]
	_ = x[StructureTypeBindImagePlaneMemoryINFO-1000156002]
	_ = x[StructureTypeBindImagePlaneMemoryInfoKHR-1000156002]
	_ = x[StructureTypeBufferMemoryRequirementsInfo2-1000146000]
	_ = x[StructureTypeBufferMemoryRequirementsInfo2KHR-1000146000]
	_ = x[StructureTypeBindBufferMemoryDeviceGroupInfo-1000060013]
	_ = x[StructureTypeBindBufferMemoryInfo-1000157000]
	_ = x[StructureTypeBindImageMemoryDeviceGroupInfo-1000060014]
	_ = x[StructureTypeBindImageMemoryInfo-1000157001]
	_ = x[StructureTypeBindSparseInfo-7]
	_ = x[StructureTypeBufferCreateInfo-12]
	_ = x[StructureTypeBufferMemoryBarrier-44]
	_ = x[StructureTypeBufferViewCreateInfo-13]
	_ = x[StructureTypeCheckpointDataNV-1000206000]
	_ = x[StructureTypeCommandBufferInheritanceConditionalRenderingInfoEXT-1000081000]
	_ = x[StructureTypeConditionalRenderingBeginInfoEXT-1000081002]
	_ = x[StructureTypeCommandBufferAllocateInfo-40]
	_ = x[StructureTypeCommandBufferBeginInfo-42]
	_ = x[StructureTypeCommandBufferInheritanceInfo-41]
	_ = x[StructureTypeCommandPoolCreateInfo-39]
	_ = x[StructureTypeComputePipelineCreateInfo-29]
	_ = x[StructureTypeCopyDescriptorSet-36]
	_ = x[StructureTypeD3D12FenceSubmitInfoKHR-1000078002]
	_ = x[StructureTypeDebugMarkerMarkerInfoEXT-1000022002]
	_ = x[StructureTypeDebugMarkerObjectNameInfoEXT-1000022000]
	_ = x[StructureTypeDebugMarkerObjectTagInfoEXT-1000022001]
	_ = x[StructureTypeDebugReportCallbackCreateInfoEXT-1000011000]
	_ = x[StructureTypeDebugReportCreateInfoEXT-1000011000]
	_ = x[StructureTypeDebugUtilsLabelEXT-1000128002]
	_ = x[StructureTypeDebugUtilsMessengerCallbackDataEXT-1000128003]
	_ = x[StructureTypeDebugUtilsMessengerCreateInfoEXT-1000128004]
	_ = x[StructureTypeDebugUtilsObjectNameInfoEXT-1000128000]
	_ = x[StructureTypeDebugUtilsObjectTagInfoEXT-1000128001]
	_ = x[StructureTypeDedicatedAllocationBufferCreateInfoNV-1000026001]
	_ = x[StructureTypeDedicatedAllocationImageCreateInfoNV-1000026000]
	_ = x[StructureTypeDedicatedAllocationMemoryAllocateInfoNV-1000026002]
	_ = x[StructureTypeDescriptorPoolInlineUniformBlockCreateInfoEXT-1000138003]
	_ = x[StructureTypeDescriptorSetLayoutBindingFlagsCreateInfoEXT-1000161000]
	_ = x[StructureTypeDescriptorSetLayoutSupport-1000168001]
	_ = x[StructureTypeDescriptorSetLayoutSupportKHR-1000168001]
	_ = x[StructureTypeDescriptorSetVariableDescriptorCountAllocateInfoExt-1000161003]
	_ = x[StructureTypeDescriptorSetVariableDescriptorCountLayoutSupportEXT-1000161004]
	_ = x[StructureTypeDescriptorUpdateTemplateCreateINFO-1000085000]
	_ = x[StructureTypeDescriptorUpdateTemplateCreateInfoKHR-1000085000]
	_ = x[StructureTypeDeviceEventInfoEXT-1000091001]
	_ = x[StructureTypeDeviceGroupBindSparseInfoKHR-1000060006]
	_ = x[StructureTypeDeviceGroupCommandBufferBeginInfoKHR-1000060004]
	_ = x[StructureTypeDeviceGroupDeviceCreateInfoKHR-1000070001]
	_ = x[StructureTypeDeviceGroupPresentCapabilitiesKHR-1000060007]
	_ = x[StructureTypeDeviceGroupPresentInfoKHR-1000060011]
	_ = x[StructureTypeDeviceGroupRenderPassBeginInfoKHR-1000060003]
	_ = x[StructureTypeDeviceGroupSubmitInfoKHR-1000060005]
	_ = x[StructureTypeDeviceGroupSwapchainCreateInfoKHR-1000060012]
	_ = x[StructureTypeDeviceQueueGlobalPriorityCreateInfoEXT-1000174000]
	_ = x[StructureTypeDeviceQueueInfo2-1000145003]
	_ = x[StructureTypeDisplayEventInfoEXT-1000091002]
	_ = x[StructureTypeDisplayModeCreateInfoKHR-1000002000]
	_ = x[StructureTypeDisplayModeProperties2KHR-1000121002]
	_ = x[StructureTypeDisplayPlaneCapabilities2KHR-1000121004]
	_ = x[StructureTypeDisplayPlaneInfo2KHR-1000121003]
	_ = x[StructureTypeDisplayPlaneProperties2KHR-1000121001]
	_ = x[StructureTypeDisplayPowerInfoEXT-1000091000]
	_ = x[StructureTypeDisplayPresentInfoKHR-1000003000]
	_ = x[StructureTypeDisplayProperties2KHR-1000121000]
	_ = x[StructureTypeDisplaySurfaceCreateInfoKHR-1000002001]
	_ = x[StructureTypeDescriptorPoolCreateInfo-33]
	_ = x[StructureTypeDescriptorSetAllocateInfo-34]
	_ = x[StructureTypeDescriptorSetLayoutCreateInfo-32]
	_ = x[StructureTypeDeviceCreateInfo-3]
	_ = x[StructureTypeDeviceGroupBindSparseInfo-1000060006]
	_ = x[StructureTypeDeviceGroupCommandBufferBeginInfo-1000060004]
	_ = x[StructureTypeDeviceGroupDeviceCreateInfo-1000070001]
	_ = x[StructureTypeDeviceGroupRenderPassBeginInfo-1000060003]
	_ = x[StructureTypeDeviceGroupSubmitInfo-1000060005]
	_ = x[StructureTypeDeviceQueueCreateInfo-2]
	_ = x[StructureTypeExportFenceCreateInfo-1000113000]
	_ = x[StructureTypeExportFenceCreateInfoKHR-1000113000]
	_ = x[StructureTypeExportFenceWin32HandleInfoKHR-1000114001]
	_ = x[StructureTypeExportMemoryAllocateInfo-1000072002]
	_ = x[StructureTypeExportMemoryAllocateInfoKHR-1000072002]
	_ = x[StructureTypeExportMemoryAllocateInfoNV-1000056001]
	_ = x[StructureTypeExportMemoryWin32HandleInfoKHR-1000073001]
	_ = x[StructureTypeExportMemoryWin32HandleInfoNV-1000057001]
	_ = x[StructureTypeExportSemaphoreCreateInfo-1000077000]
	_ = x[StructureTypeExportSemaphoreCreateInfoKHR-1000077000]
	_ = x[StructureTypeExportSemaphoreWin32HandleInfoKHR-1000078001]
	_ = x[StructureTypeExternalBufferProperties-1000071003]
	_ = x[StructureTypeExternalBufferPropertiesKHR-1000071003]
	_ = x[StructureTypeExternalFenceProperties-1000112001]
	_ = x[StructureTypeExternalFencePropertiesKHR-1000112001]
	_ = x[StructureTypeExternalFormatAndroid-1000129005]
	_ = x[StructureTypeExternalImageFormatProperties-1000071001]
	_ = x[StructureTypeExternalImageFormatPropertiesKHR-1000071001]
	_ = x[StructureTypeExternalMemoryBufferCreateInfo-1000072000]
	_ = x[StructureTypeExternalMemoryBufferCreateInfoKHR-1000072000]
	_ = x[StructureTypeExternalMemoryImageCreateInfo-1000072001]
	_ = x[StructureTypeExternalMemoryImageCreateInfoKHR-1000072001]
	_ = x[StructureTypeExternalMemoryImageCreateInfoNV-1000056000]
	_ = x[StructureTypeExternalSemaphoreProperties-1000076001]
	_ = x[StructureTypeExternalSemaphorePropertiesKHR-1000076001]
	_ = x[StructureTypeEventCreateInfo-10]
	_ = x[StructureTypeFenceGetFdInfoKHR-1000115001]
	_ = x[StructureTypeFenceGetWin32HandleInfoKHR-1000114002]
	_ = x[StructureTypeFormatProperties2-1000059002]
	_ = x[StructureTypeFormatProperties2KHR-1000059002]
	_ = x[StructureTypeFenceCreateInfo-8]
	_ = x[StructureTypeFramebufferCreateInfo-37]
	_ = x[StructureTypeGraphicsPipelineCreateInfo-28]
	_ = x[StructureTypeHdrMetadataEXT-1000105000]
	_ = x[StructureTypeImageFormatListCreateInfoKHR-1000147000]
	_ = x[StructureTypeImageFormatProperties2-1000059003]
	_ = x[StructureTypeImageFormatProperties2KHR-1000059003]
	_ = x[StructureTypeImageMemoryRequirementsInfo2-1000146001]
	_ = x[StructureTypeImageMemoryRequirementsInfo2KHR-1000146001]
	_ = x[StructureTypeImagePlaneMemoryRequirementsInfo-1000156003]
	_ = x[StructureTypeImagePlaneMemoryRequirementsInfoKHR-1000156003]
	_ = x[StructureTypeImageSparseMemoryRequirementsInfo2-1000146002]
	_ = x[StructureTypeImageSparseMemoryRequirementsInfo2KHR-1000146002]
	_ = x[StructureTypeImageSwapchainCreateInfoKHR-1000060008]
	_ = x[StructureTypeImageViewAstcDecodeModeEXT-1000067000]
	_ = x[StructureTypeImageViewUsageCreateInfo-1000117002]
	_ = x[StructureTypeImageViewUsageCreateInfoKHR-1000117002]
	_ = x[StructureTypeImportAndroidHardwareBufferInfoAndroid-1000129003]
	_ = x[StructureTypeImportFenceFdInfoKHR-1000115000]
	_ = x[StructureTypeImportFenceWin32HandleInfoKHR-1000114000]
	_ = x[StructureTypeImportMemoryFdInfoKHR-1000074000]
	_ = x[StructureTypeImportMemoryHostPointerInfoEXT-1000178000]
	_ = x[StructureTypeImportMemoryWin32HandleInfoKHR-1000073000]
	_ = x[StructureTypeImportMemoryWin32HandleInfoNV-1000057000]
	_ = x[StructureTypeImportSemaphoreFdInfoKHR-1000079000]
	_ = x[StructureTypeImportSemaphoreWin32HandleInfoKHR-1000078000]
	_ = x[StructureTypeIosSurfaceCreateInfoMVK-1000122000]
	_ = x[StructureTypeImageCreateInfo-14]
	_ = x[StructureTypeImageMemoryBarrier-45]
	_ = x[StructureTypeImageViewCreateInfo-15]
	_ = x[StructureTypeInstanceCreateInfo-1]
	_ = x[StructureTypeLoaderDeviceCreateInfo-48]
	_ = x[StructureTypeLoaderInstanceCreateInfo-47]
	_ = x[StructureTypeMacosSurfaceCreateInfoMVK-1000123000]
	_ = x[StructureTypeMemoryAllocateFlagsInfoKHR-1000060000]
	_ = x[StructureTypeMemoryDedicatedAllocateInfoKHR-1000127001]
	_ = x[StructureTypeMemoryDedicatedRequirementsKHR-1000127000]
	_ = x[StructureTypeMemoryFdPropertiesKHR-1000074001]
	_ = x[StructureTypeMemoryGetAndroidHardwareBufferInfoAndroid-1000129004]
	_ = x[StructureTypeMemoryGetFdInfoKHR-1000074002]
	_ = x[StructureTypeMemoryGetWin32HandleInfoKHR-1000073003]
	_ = x[StructureTypeMemoryHostPointerPropertiesEXT-1000178001]
	_ = x[StructureTypeMemoryRequirements2-1000146003]
	_ = x[StructureTypeMemoryRequirements2KHR-1000146003]
	_ = x[StructureTypeMemoryWin32HandlePropertiesKHR-1000073002]
	_ = x[StructureTypeMirSurfaceCreateInfoKHR-1000007000]
	_ = x[StructureTypeMultisamplePropertiesEXT-1000143004]
	_ = x[StructureTypeMappedMemoryRange-6]
	_ = x[StructureTypeMemoryAllocateFlagsInfo-1000060000]
	_ = x[StructureTypeMemoryAllocateInfo-5]
	_ = x[StructureTypeMemoryBarrier-46]
	_ = x[StructureTypeMemoryDedicatedAllocateInfo-1000127001]
	_ = x[StructureTypeMemoryDedicatedRequirements-1000127000]
	_ = x[StructureTypePhysicalDevice16BitStorageFeaturesKHR-1000083000]
	_ = x[StructureTypePhysicalDevice8BitStorageFeaturesKHR-1000177000]
	_ = x[StructureTypePhysicalDeviceAstcDecodeFeaturesEXT-1000067001]
	_ = x[StructureTypePhysicalDeviceBlendOperationAdvancedFeaturesEXT-1000148000]
	_ = x[StructureTypePhysicalDeviceBlendOperationAdvancedPropertiesEXT-1000148001]
	_ = x[StructureTypePhysicalDeviceComputeShaderDerivativesFeatures_NV-1000201000]
	_ = x[StructureTypePhysicalDeviceConditionalRenderingFeaturesEXT-1000081001]
	_ = x[StructureTypePhysicalDeviceConservativeRasterizationPropertiesEXT-1000101000]
	_ = x[StructureTypePhysicalDeviceCornerSampledImageFeaturesNV-1000050000]
	_ = x[StructureTypePhysicalDeviceDescriptorIndexingFeaturesEXT-1000161001]
	_ = x[StructureTypePhysicalDeviceDescriptorIndexingPropertiesEXT-1000161002]
	_ = x[StructureTypePhysicalDeviceDiscardRectanglePropertiesEXT-1000099000]
	_ = x[StructureTypePhysicalDeviceExclusiveScissorFeaturesNV-1000205002]
	_ = x[StructureTypePhysicalDeviceExternalBufferInfo-1000071002]
	_ = x[StructureTypePhysicalDeviceExternalBufferInfoKHR-1000071002]
	_ = x[StructureTypePhysicalDeviceExternalFenceInfo-1000112000]
	_ = x[StructureTypePhysicalDeviceExternalFenceInfoKHR-1000112000]
	_ = x[StructureTypePhysicalDeviceExternalImageFormatInfo-1000071000]
	_ = x[StructureTypePhysicalDeviceExternalImageFormatInfoKHR-1000071000]
	_ = x[StructureTypePhysicalDeviceExternalMemoryHostPropertiesEXT-1000178002]
	_ = x[StructureTypePhysicalDeviceExternalSemaphoreInfo-1000076000]
	_ = x[StructureTypePhysicalDeviceExternalSemaphoreInfoKHR-1000076000]
	_ = x[StructureTypePhysicalDeviceFeatures2-1000059000]
	_ = x[StructureTypePhysicalDeviceFeatures2KHR-1000059000]
	_ = x[StructureTypePhysicalDeviceFragmentShaderBarycentricFeaturesNV-1000203000]
	_ = x[StructureTypePhysicalDeviceGroupPropertiesKHR-1000070000]
	_ = x[StructureTypePhysicalDeviceIdProperties-1000071004]
	_ = x[StructureTypePhysicalDeviceIdPropertiesKHR-1000071004]
	_ = x[StructureTypePhysicalDeviceImageFormatInfo2-1000059004]
	_ = x[StructureTypePhysicalDeviceImageFormatInfo2KHR-1000059004]
	_ = x[StructureTypePhysicalDeviceInlineUniformBlockFeaturesEXT-1000138000]
	_ = x[StructureTypePhysicalDeviceInlineUniformBlockPropertiesEXT-1000138001]
	_ = x[StructureTypePhysicalDeviceMaintenance3Properties-1000168000]
	_ = x[StructureTypePhysicalDeviceMaintenance3PropertiesKHR-1000168000]
	_ = x[StructureTypePhysicalDeviceMemoryProperties2-1000059006]
	_ = x[StructureTypePhysicalDeviceMemoryProperties2KHR-1000059006]
	_ = x[StructureTypePhysicalDeviceMeshShaderFeaturesNV-1000202000]
	_ = x[StructureTypePhysicalDeviceMeshShaderPropertiesNV-1000202001]
	_ = x[StructureTypePhysicalDeviceMultiviewFeatures-1000053001]
	_ = x[StructureTypePhysicalDeviceMultiviewFeaturesKHR-1000053001]
	_ = x[StructureTypePhysicalDeviceMultiviewProperties-1000053002]
	_ = x[StructureTypePhysicalDeviceMultiviewPropertiesKHR-1000053002]
	_ = x[StructureTypePhysicalDevicePointClippingProperties-1000117000]
	_ = x[StructureTypePhysicalDevicePointClippingPropertiesKHR-1000117000]
	_ = x[StructureTypePhysicalDeviceProperties2-1000059001]
	_ = x[StructureTypePhysicalDeviceProperties2KHR-1000059001]
	_ = x[StructureTypePhysicalDeviceProtectedMemoryFeatures-1000145001]
	_ = x[StructureTypePhysicalDeviceProtectedMemoryProperties-1000145002]
	_ = x[StructureTypePhysicalDevicePushDescriptorPropertiesKHR-1000080000]
	_ = x[StructureTypePhysicalDeviceRepresentativeFragmentTestFeaturesNV-1000166000]
	_ = x[StructureTypePhysicalDeviceSamplerFilterMinmaxPropertiesEXT-1000130000]
	_ = x[StructureTypePhysicalDeviceSamplerYCbCrConversionFeatures-1000156004]
	_ = x[StructureTypePhysicalDeviceSamplerYCbCrConversionFeaturesKHR-1000156004]
	_ = x[StructureTypePhysicalDeviceSampleLocationsPropertiesEXT-1000143003]
	_ = x[StructureTypePhysicalDeviceShaderCorePropertiesAMD-1000185000]
	_ = x[StructureTypePhysicalDeviceShaderDrawParameterFeatures-1000063000]
	_ = x[StructureTypePhysicalDeviceShaderImageFootprintFeaturesNV-1000204000]
	_ = x[StructureTypePhysicalDeviceShadingRateImageFeaturesNV-1000164001]
	_ = x[StructureTypePhysicalDeviceShadingRateImagePropertiesNV-1000164002]
	_ = x[StructureTypePhysicalDeviceSparseImageFormatInfo2-1000059008]
	_ = x[StructureTypePhysicalDeviceSparseImageFormatInfo2KHR-1000059008]
	_ = x[StructureTypePhysicalDeviceSurfaceInfo2KHR-1000119000]
	_ = x[StructureTypePhysicalDeviceVariablePointerFeatures-1000120000]
	_ = x[StructureTypePhysicalDeviceVariablePointerFeaturesKHR-1000120000]
	_ = x[StructureTypePhysicalDeviceVertexAttributeDivisorFeaturesEXT-1000190002]
	_ = x[StructureTypePhysicalDeviceVertexAttributeDivisorPropertiesEXT-1000190000]
	_ = x[StructureTypePhysicalDeviceVulkanMemoryModelFeaturesKHR-1000211000]
	_ = x[StructureTypePipelineColorBlendAdvancedStateCreateInfoEXT-1000148002]
	_ = x[StructureTypePipelineCoverageModulationStateCreateInfoNV-1000152000]
	_ = x[StructureTypePipelineCoverageToColorStateCreateInfoNV-1000149000]
	_ = x[StructureTypePipelineDiscardRectangleStateCreateInfoEXT-1000099001]
	_ = x[StructureTypePipelineRasterizationConservativeStateCreateInfoEXT-1000101001]
	_ = x[StructureTypePipelineRasterizationStateRasterizationOrderAMD-1000018000]
	_ = x[StructureTypePipelineRepresentativeFragmentTestStateCreateInfoNV-1000166001]
	_ = x[StructureTypePipelineSampleLocationsStateCreateInfoEXT-1000143002]
	_ = x[StructureTypePipelineTessellationDomainOriginStateCreateInfo-1000117003]
	_ = x[StructureTypePipelineTessellationDomainOriginStateCreateInfoKHR-1000117003]
	_ = x[StructureTypePipelineVertexInputDivisorStateCreateInfoEXT-1000190001]
	_ = x[StructureTypePipelineViewportCoarseSampleOrderStateCreateInfoNV-1000164005]
	_ = x[StructureTypePipelineViewportExclusiveScissorStateCreateInfoNV-1000205000]
	_ = x[StructureTypePipelineViewportShadingRateImageStateCreateInfoNV-1000164000]
	_ = x[StructureTypePipelineViewportSwizzleStateCreateInfoNV-1000098000]
	_ = x[StructureTypePipelineViewportWScalingStateCreateInfoNV-1000087000]
	_ = x[StructureTypePresentInfoKHR-1000001001]
	_ = x[StructureTypePresentRegionsKHR-1000084000]
	_ = x[StructureTypePresentTimesInfoGoogle-1000092000]
	_ = x[StructureTypeProtectedSubmitInfo-1000145000]
	_ = x[StructureTypePhysicalDevice16ItStorageFeatures-1000083000]
	_ = x[StructureTypePhysicalDeviceGroupProperties-1000070000]
	_ = x[StructureTypePhysicalDeviceSubgroupProperties-1000094000]
	_ = x[StructureTypePipelineCacheCreateInfo-17]
	_ = x[StructureTypePipelineColorBlendStateCreateInfo-26]
	_ = x[StructureTypePipelineDepthStencilStateCreateInfo-25]
	_ = x[StructureTypePipelineDynamicStateCreateInfo-27]
	_ = x[StructureTypePipelineInputAssemblyStateCreateInfo-20]
	_ = x[StructureTypePipelineLayoutCreateInfo-30]
	_ = x[StructureTypePipelineMultisampleStateCreateInfo-24]
	_ = x[StructureTypePipelineRasterizationStateCreateInfo-23]
	_ = x[StructureTypePipelineShaderStageCreateInfo-18]
	_ = x[StructureTypePipelineTessellationStateCreateInfo-21]
	_ = x[StructureTypePipelineVertexInputStateCreateInfo-19]
	_ = x[StructureTypePipelineViewportStateCreateInfo-22]
	_ = x[StructureTypeQueueFamilyCheckpointPropertiesNV-1000206001]
	_ = x[StructureTypeQueueFamilyProperties2-1000059005]
	_ = x[StructureTypeQueueFamilyProperties2KHR-1000059005]
	_ = x[StructureTypeQueryPoolCreateInfo-11]
	_ = x[StructureTypeRenderPassCreateInfo2KHR-1000109004]
	_ = x[StructureTypeRenderPassInputAttachmentAspectCreateInfo-1000117001]
	_ = x[StructureTypeRenderPassInputAttachmentAspectCreateInfoKHR-1000117001]
	_ = x[StructureTypeRenderPassMultiviewCreateInfo-1000053000]
	_ = x[StructureTypeRenderPassMultiviewCreateInfoKHR-1000053000]
	_ = x[StructureTypeRenderPassSampleLocationsBeginInfoEXT-1000143001]
	_ = x[StructureTypeRenderPassBeginInfo-43]
	_ = x[StructureTypeRenderPassCreateInfo-38]
	_ = x[StructureTypeSamplerReductionModeCreateInfoEXT-1000130001]
	_ = x[StructureTypeSamplerYCbCrConversionCreateInfo-1000156000]
	_ = x[StructureTypeSamplerYCbCrConversionCreateInfoKHR-1000156000]
	_ = x[StructureTypeSamplerYCbCrConversionImageFormatProperties-1000156005]
	_ = x[StructureTypeSamplerYCbCrConversionImageFormatPropertiesKHR-1000156005]
	_ = x[StructureTypeSamplerYCbCrConversionINFO-1000156001]
	_ = x[StructureTypeSamplerYCbCrConversionINFO_KHR-1000156001]
	_ = x[StructureTypeSampleLocationsInfoEXT-1000143000]
	_ = x[StructureTypeSemaphoreGetFdInfoKHR-1000079001]
	_ = x[StructureTypeSemaphoreGetWin32HandleInfoKHR-1000078003]
	_ = x[StructureTypeShaderModuleValidationCacheCreateInfoEXT-1000160001]
	_ = x[StructureTypeSharedPresentSurfaceCapabilitiesKHR-1000111000]
	_ = x[StructureTypeSparseImageFormatProperties2-1000059007]
	_ = x[StructureTypeSparseImageFormatProperties2KHR-1000059007]
	_ = x[StructureTypeSparseImageMemoryRequirements2-1000146004]
	_ = x[StructureTypeSparseImageMemoryRequirements2KHR-1000146004]
	_ = x[StructureTypeSubpassBeginInfoKHR-1000109005]
	_ = x[StructureTypeSubpassDependency2KHR-1000109003]
	_ = x[StructureTypeSubpassDescription2KHR-1000109002]
	_ = x[StructureTypeSubpassEndInfoKHR-1000109006]
	_ = x[StructureTypeSurfaceCapabilities2EXT-1000090000]
	_ = x[StructureTypeSurfaceCapabilities2KHR-1000119001]
	_ = x[StructureTypeSurfaceFormat2KHR-1000119002]
	_ = x[StructureTypeSwapchainCounterCreateInfoEXT-1000091003]
	_ = x[StructureTypeSwapchainCreateInfoKHR-1000001000]
	_ = x[StructureTypeSamplerCreateInfo-31]
	_ = x[StructureTypeSemaphoreCreateInfo-9]
	_ = x[StructureTypeShaderModuleCreateInfo-16]
	_ = x[StructureTypeSubmitInfo-4]
	_ = x[StructureTypeTextureLodGatherFormatPropertiesAMD-1000041000]
	_ = x[StructureTypeValidationCacheCreateInfoEXT-1000160000]
	_ = x[StructureTypeValidationFlagsEXT-1000061000]
	_ = x[StructureTypeViSurfaceCreateInfoNN-1000062000]
	_ = x[StructureTypeWaylandSurfaceCreateInfoKHR-1000006000]
	_ = x[StructureTypeWin32KeyedMutexAcquireReleaseInfoKHR-1000075000]
	_ = x[StructureTypeWin32KeyedMutexAcquireReleaseInfoNV-1000058000]
	_ = x[StructureTypeWin32SurfaceCreateInfoKHR-1000009000]
	_ = x[StructureTypeWriteDescriptorSetInlineUniformBlockEXT-1000138002]
	_ = x[StructureTypeWriteDescriptorSet-35]
	_ = x[StructureTypeXcbSurfaceCreateInfoKHR-1000005000]
	_ = x[StructureTypeXlibSurfaceCreateInfoKHR-1000004000]
}

const _StructureType_name = "StructureTypeApplicationInfoStructureTypeInstanceCreateInfoStructureTypeDeviceQueueCreateInfoStructureTypeDeviceCreateInfoStructureTypeSubmitInfoStructureTypeMemoryAllocateInfoStructureTypeMappedMemoryRangeStructureTypeBindSparseInfoStructureTypeFenceCreateInfoStructureTypeSemaphoreCreateInfoStructureTypeEventCreateInfoStructureTypeQueryPoolCreateInfoStructureTypeBufferCreateInfoStructureTypeBufferViewCreateInfoStructureTypeImageCreateInfoStructureTypeImageViewCreateInfoStructureTypeShaderModuleCreateInfoStructureTypePipelineCacheCreateInfoStructureTypePipelineShaderStageCreateInfoStructureTypePipelineVertexInputStateCreateInfoStructureTypePipelineInputAssemblyStateCreateInfoStructureTypePipelineTessellationStateCreateInfoStructureTypePipelineViewportStateCreateInfoStructureTypePipelineRasterizationStateCreateInfoStructureTypePipelineMultisampleStateCreateInfoStructureTypePipelineDepthStencilStateCreateInfoStructureTypePipelineColorBlendStateCreateInfoStructureTypePipelineDynamicStateCreateInfoStructureTypeGraphicsPipelineCreateInfoStructureTypeComputePipelineCreateInfoStructureTypePipelineLayoutCreateInfoStructureTypeSamplerCreateInfoStructureTypeDescriptorSetLayoutCreateInfoStructureTypeDescriptorPoolCreateInfoStructureTypeDescriptorSetAllocateInfoStructureTypeWriteDescriptorSetStructureTypeCopyDescriptorSetStructureTypeFramebufferCreateInfoStructureTypeRenderPassCreateInfoStructureTypeCommandPoolCreateInfoStructureTypeCommandBufferAllocateInfoStructureTypeCommandBufferInheritanceInfoStructureTypeCommandBufferBeginInfoStructureTypeRenderPassBeginInfoStructureTypeBufferMemoryBarrierStructureTypeImageMemoryBarrierStructureTypeMemoryBarrierStructureTypeLoaderInstanceCreateInfoStructureTypeLoaderDeviceCreateInfoStructureTypeSwapchainCreateInfoKHRStructureTypePresentInfoKHRStructureTypeDisplayModeCreateInfoKHRStructureTypeDisplaySurfaceCreateInfoKHRStructureTypeDisplayPresentInfoKHRStructureTypeXlibSurfaceCreateInfoKHRStructureTypeXcbSurfaceCreateInfoKHRStructureTypeWaylandSurfaceCreateInfoKHRStructureTypeMirSurfaceCreateInfoKHRStructureTypeAndroidSurfaceCreateInfoKHRStructureTypeWin32SurfaceCreateInfoKHRStructureTypeDebugReportCallbackCreateInfoEXTStructureTypePipelineRasterizationStateRasterizationOrderAMDStructureTypeDebugMarkerObjectNameInfoEXTStructureTypeDebugMarkerObjectTagInfoEXTStructureTypeDebugMarkerMarkerInfoEXTStructureTypeDedicatedAllocationImageCreateInfoNVStructureTypeDedicatedAllocationBufferCreateInfoNVStructureTypeDedicatedAllocationMemoryAllocateInfoNVStructureTypeTextureLodGatherFormatPropertiesAMDStructureTypePhysicalDeviceCornerSampledImageFeaturesNVStructureTypeRenderPassMultiviewCreateInfoStructureTypePhysicalDeviceMultiviewFeaturesStructureTypePhysicalDeviceMultiviewPropertiesStructureTypeExternalMemoryImageCreateInfoNVStructureTypeExportMemoryAllocateInfoNVStructureTypeImportMemoryWin32HandleInfoNVStructureTypeExportMemoryWin32HandleInfoNVStructureTypeWin32KeyedMutexAcquireReleaseInfoNVStructureTypePhysicalDeviceFeatures2StructureTypePhysicalDeviceProperties2StructureTypeFormatProperties2StructureTypeImageFormatProperties2StructureTypePhysicalDeviceImageFormatInfo2StructureTypeQueueFamilyProperties2StructureTypePhysicalDeviceMemoryProperties2StructureTypeSparseImageFormatProperties2StructureTypePhysicalDeviceSparseImageFormatInfo2StructureTypeMemoryAllocateFlagsInfoKHRStructureTypeDeviceGroupRenderPassBeginInfoKHRStructureTypeDeviceGroupCommandBufferBeginInfoKHRStructureTypeDeviceGroupSubmitInfoKHRStructureTypeDeviceGroupBindSparseInfoKHRStructureTypeDeviceGroupPresentCapabilitiesKHRStructureTypeImageSwapchainCreateInfoKHRStructureTypeBindImageMemorySwapchainInfoKHRStructureTypeAcquireNextImageInfoKHRStructureTypeDeviceGroupPresentInfoKHRStructureTypeDeviceGroupSwapchainCreateInfoKHRStructureTypeBindBufferMemoryDeviceGroupInfoKHRStructureTypeBindImageMemoryDeviceGroupInfoKHRStructureTypeValidationFlagsEXTStructureTypeViSurfaceCreateInfoNNStructureTypePhysicalDeviceShaderDrawParameterFeaturesStructureTypeImageViewAstcDecodeModeEXTStructureTypePhysicalDeviceAstcDecodeFeaturesEXTStructureTypePhysicalDeviceGroupPropertiesKHRStructureTypeDeviceGroupDeviceCreateInfoKHRStructureTypePhysicalDeviceExternalImageFormatInfoStructureTypeExternalImageFormatPropertiesStructureTypePhysicalDeviceExternalBufferInfoStructureTypeExternalBufferPropertiesStructureTypePhysicalDeviceIdPropertiesStructureTypeExternalMemoryBufferCreateInfoStructureTypeExternalMemoryImageCreateInfoStructureTypeExportMemoryAllocateInfoStructureTypeImportMemoryWin32HandleInfoKHRStructureTypeExportMemoryWin32HandleInfoKHRStructureTypeMemoryWin32HandlePropertiesKHRStructureTypeMemoryGetWin32HandleInfoKHRStructureTypeImportMemoryFdInfoKHRStructureTypeMemoryFdPropertiesKHRStructureTypeMemoryGetFdInfoKHRStructureTypeWin32KeyedMutexAcquireReleaseInfoKHRStructureTypePhysicalDeviceExternalSemaphoreInfoStructureTypeExternalSemaphorePropertiesStructureTypeExportSemaphoreCreateInfoStructureTypeImportSemaphoreWin32HandleInfoKHRStructureTypeExportSemaphoreWin32HandleInfoKHRStructureTypeD3D12FenceSubmitInfoKHRStructureTypeSemaphoreGetWin32HandleInfoKHRStructureTypeImportSemaphoreFdInfoKHRStructureTypeSemaphoreGetFdInfoKHRStructureTypePhysicalDevicePushDescriptorPropertiesKHRStructureTypeCommandBufferInheritanceConditionalRenderingInfoEXTStructureTypePhysicalDeviceConditionalRenderingFeaturesEXTStructureTypeConditionalRenderingBeginInfoEXTStructureTypePhysicalDevice16BitStorageFeaturesKHRStructureTypePresentRegionsKHRStructureTypeDescriptorUpdateTemplateCreateINFOStructureTypePipelineViewportWScalingStateCreateInfoNVStructureTypeSurfaceCapabilities2EXTStructureTypeDisplayPowerInfoEXTStructureTypeDeviceEventInfoEXTStructureTypeDisplayEventInfoEXTStructureTypeSwapchainCounterCreateInfoEXTStructureTypePresentTimesInfoGoogleStructureTypePhysicalDeviceSubgroupPropertiesStructureTypePipelineViewportSwizzleStateCreateInfoNVStructureTypePhysicalDeviceDiscardRectanglePropertiesEXTStructureTypePipelineDiscardRectangleStateCreateInfoEXTStructureTypePhysicalDeviceConservativeRasterizationPropertiesEXTStructureTypePipelineRasterizationConservativeStateCreateInfoEXTStructureTypeHdrMetadataEXTStructureTypeAttachmentDescription2KHRStructureTypeAttachmentReference2KHRStructureTypeSubpassDescription2KHRStructureTypeSubpassDependency2KHRStructureTypeRenderPassCreateInfo2KHRStructureTypeSubpassBeginInfoKHRStructureTypeSubpassEndInfoKHRStructureTypeSharedPresentSurfaceCapabilitiesKHRStructureTypePhysicalDeviceExternalFenceInfoStructureTypeExternalFencePropertiesStructureTypeExportFenceCreateInfoStructureTypeImportFenceWin32HandleInfoKHRStructureTypeExportFenceWin32HandleInfoKHRStructureTypeFenceGetWin32HandleInfoKHRStructureTypeImportFenceFdInfoKHRStructureTypeFenceGetFdInfoKHRStructureTypePhysicalDevicePointClippingPropertiesStructureTypeRenderPassInputAttachmentAspectCreateInfoStructureTypeImageViewUsageCreateInfoStructureTypePipelineTessellationDomainOriginStateCreateInfoStructureTypePhysicalDeviceSurfaceInfo2KHRStructureTypeSurfaceCapabilities2KHRStructureTypeSurfaceFormat2KHRStructureTypePhysicalDeviceVariablePointerFeaturesStructureTypeDisplayProperties2KHRStructureTypeDisplayPlaneProperties2KHRStructureTypeDisplayModeProperties2KHRStructureTypeDisplayPlaneInfo2KHRStructureTypeDisplayPlaneCapabilities2KHRStructureTypeIosSurfaceCreateInfoMVKStructureTypeMacosSurfaceCreateInfoMVKStructureTypeMemoryDedicatedRequirementsKHRStructureTypeMemoryDedicatedAllocateInfoKHRStructureTypeDebugUtilsObjectNameInfoEXTStructureTypeDebugUtilsObjectTagInfoEXTStructureTypeDebugUtilsLabelEXTStructureTypeDebugUtilsMessengerCallbackDataEXTStructureTypeDebugUtilsMessengerCreateInfoEXTStructureTypeAndroidHardwareBufferUsageAndroidStructureTypeAndroidHardwareBufferPropertiesAndroidStructureTypeAndroidHardwareBufferFormatPropertiesAndroidStructureTypeImportAndroidHardwareBufferInfoAndroidStructureTypeMemoryGetAndroidHardwareBufferInfoAndroidStructureTypeExternalFormatAndroidStructureTypePhysicalDeviceSamplerFilterMinmaxPropertiesEXTStructureTypeSamplerReductionModeCreateInfoEXTStructureTypePhysicalDeviceInlineUniformBlockFeaturesEXTStructureTypePhysicalDeviceInlineUniformBlockPropertiesEXTStructureTypeWriteDescriptorSetInlineUniformBlockEXTStructureTypeDescriptorPoolInlineUniformBlockCreateInfoEXTStructureTypeSampleLocationsInfoEXTStructureTypeRenderPassSampleLocationsBeginInfoEXTStructureTypePipelineSampleLocationsStateCreateInfoEXTStructureTypePhysicalDeviceSampleLocationsPropertiesEXTStructureTypeMultisamplePropertiesEXTStructureTypeProtectedSubmitInfoStructureTypePhysicalDeviceProtectedMemoryFeaturesStructureTypePhysicalDeviceProtectedMemoryPropertiesStructureTypeDeviceQueueInfo2StructureTypeBufferMemoryRequirementsInfo2StructureTypeImageMemoryRequirementsInfo2StructureTypeImageSparseMemoryRequirementsInfo2StructureTypeMemoryRequirements2StructureTypeSparseImageMemoryRequirements2StructureTypeImageFormatListCreateInfoKHRStructureTypePhysicalDeviceBlendOperationAdvancedFeaturesEXTStructureTypePhysicalDeviceBlendOperationAdvancedPropertiesEXTStructureTypePipelineColorBlendAdvancedStateCreateInfoEXTStructureTypePipelineCoverageToColorStateCreateInfoNVStructureTypePipelineCoverageModulationStateCreateInfoNVStructureTypeSamplerYCbCrConversionCreateInfoStructureTypeSamplerYCbCrConversionINFOStructureTypeBindImagePlaneMemoryINFOStructureTypeImagePlaneMemoryRequirementsInfoStructureTypePhysicalDeviceSamplerYCbCrConversionFeaturesStructureTypeSamplerYCbCrConversionImageFormatPropertiesStructureTypeBindBufferMemoryInfoKHRStructureTypeBindImageMemoryInfoKHRStructureTypeValidationCacheCreateInfoEXTStructureTypeShaderModuleValidationCacheCreateInfoEXTStructureTypeDescriptorSetLayoutBindingFlagsCreateInfoEXTStructureTypePhysicalDeviceDescriptorIndexingFeaturesEXTStructureTypePhysicalDeviceDescriptorIndexingPropertiesEXTStructureTypeDescriptorSetVariableDescriptorCountAllocateInfoExtStructureTypeDescriptorSetVariableDescriptorCountLayoutSupportEXTStructureTypePipelineViewportShadingRateImageStateCreateInfoNVStructureTypePhysicalDeviceShadingRateImageFeaturesNVStructureTypePhysicalDeviceShadingRateImagePropertiesNVStructureTypePipelineViewportCoarseSampleOrderStateCreateInfoNVStructureTypePhysicalDeviceRepresentativeFragmentTestFeaturesNVStructureTypePipelineRepresentativeFragmentTestStateCreateInfoNVStructureTypePhysicalDeviceMaintenance3PropertiesStructureTypeDescriptorSetLayoutSupportStructureTypeDeviceQueueGlobalPriorityCreateInfoEXTStructureTypePhysicalDevice8BitStorageFeaturesKHRStructureTypeImportMemoryHostPointerInfoEXTStructureTypeMemoryHostPointerPropertiesEXTStructureTypePhysicalDeviceExternalMemoryHostPropertiesEXTStructureTypePhysicalDeviceShaderCorePropertiesAMDStructureTypePhysicalDeviceVertexAttributeDivisorPropertiesEXTStructureTypePipelineVertexInputDivisorStateCreateInfoEXTStructureTypePhysicalDeviceVertexAttributeDivisorFeaturesEXTStructureTypePhysicalDeviceComputeShaderDerivativesFeatures_NVStructureTypePhysicalDeviceMeshShaderFeaturesNVStructureTypePhysicalDeviceMeshShaderPropertiesNVStructureTypePhysicalDeviceFragmentShaderBarycentricFeaturesNVStructureTypePhysicalDeviceShaderImageFootprintFeaturesNVStructureTypePipelineViewportExclusiveScissorStateCreateInfoNVStructureTypePhysicalDeviceExclusiveScissorFeaturesNVStructureTypeCheckpointDataNVStructureTypeQueueFamilyCheckpointPropertiesNVStructureTypePhysicalDeviceVulkanMemoryModelFeaturesKHR"

var _StructureType_map = map[StructureType]string{
	0:          _StructureType_name[0:28],
	1:          _StructureType_name[28:59],
	2:          _StructureType_name[59:93],
	3:          _StructureType_name[93:122],
	4:          _StructureType_name[122:145],
	5:          _StructureType_name[145:176],
	6:          _StructureType_name[176:206],
	7:          _StructureType_name[206:233],
	8:          _StructureType_name[233:261],
	9:          _StructureType_name[261:293],
	10:         _StructureType_name[293:321],
	11:         _StructureType_name[321:353],
	12:         _StructureType_name[353:382],
	13:         _StructureType_name[382:415],
	14:         _StructureType_name[415:443],
	15:         _StructureType_name[443:475],
	16:         _StructureType_name[475:510],
	17:         _StructureType_name[510:546],
	18:         _StructureType_name[546:588],
	19:         _StructureType_name[588:635],
	20:         _StructureType_name[635:684],
	21:         _StructureType_name[684:732],
	22:         _StructureType_name[732:776],
	23:         _StructureType_name[776:825],
	24:         _StructureType_name[825:872],
	25:         _StructureType_name[872:920],
	26:         _StructureType_name[920:966],
	27:         _StructureType_name[966:1009],
	28:         _StructureType_name[1009:1048],
	29:         _StructureType_name[1048:1086],
	30:         _StructureType_name[1086:1123],
	31:         _StructureType_name[1123:1153],
	32:         _StructureType_name[1153:1195],
	33:         _StructureType_name[1195:1232],
	34:         _StructureType_name[1232:1270],
	35:         _StructureType_name[1270:1301],
	36:         _StructureType_name[1301:1331],
	37:         _StructureType_name[1331:1365],
	38:         _StructureType_name[1365:1398],
	39:         _StructureType_name[1398:1432],
	40:         _StructureType_name[1432:1470],
	41:         _StructureType_name[1470:1511],
	42:         _StructureType_name[1511:1546],
	43:         _StructureType_name[1546:1578],
	44:         _StructureType_name[1578:1610],
	45:         _StructureType_name[1610:1641],
	46:         _StructureType_name[1641:1667],
	47:         _StructureType_name[1667:1704],
	48:         _StructureType_name[1704:1739],
	1000001000: _StructureType_name[1739:1774],
	1000001001: _StructureType_name[1774:1801],
	1000002000: _StructureType_name[1801:1838],
	1000002001: _StructureType_name[1838:1878],
	1000003000: _StructureType_name[1878:1912],
	1000004000: _StructureType_name[1912:1949],
	1000005000: _StructureType_name[1949:1985],
	1000006000: _StructureType_name[1985:2025],
	1000007000: _StructureType_name[2025:2061],
	1000008000: _StructureType_name[2061:2101],
	1000009000: _StructureType_name[2101:2139],
	1000011000: _StructureType_name[2139:2184],
	1000018000: _StructureType_name[2184:2244],
	1000022000: _StructureType_name[2244:2285],
	1000022001: _StructureType_name[2285:2325],
	1000022002: _StructureType_name[2325:2362],
	1000026000: _StructureType_name[2362:2411],
	1000026001: _StructureType_name[2411:2461],
	1000026002: _StructureType_name[2461:2513],
	1000041000: _StructureType_name[2513:2561],
	1000050000: _StructureType_name[2561:2616],
	1000053000: _StructureType_name[2616:2658],
	1000053001: _StructureType_name[2658:2702],
	1000053002: _StructureType_name[2702:2748],
	1000056000: _StructureType_name[2748:2792],
	1000056001: _StructureType_name[2792:2831],
	1000057000: _StructureType_name[2831:2873],
	1000057001: _StructureType_name[2873:2915],
	1000058000: _StructureType_name[2915:2963],
	1000059000: _StructureType_name[2963:2999],
	1000059001: _StructureType_name[2999:3037],
	1000059002: _StructureType_name[3037:3067],
	1000059003: _StructureType_name[3067:3102],
	1000059004: _StructureType_name[3102:3145],
	1000059005: _StructureType_name[3145:3180],
	1000059006: _StructureType_name[3180:3224],
	1000059007: _StructureType_name[3224:3265],
	1000059008: _StructureType_name[3265:3314],
	1000060000: _StructureType_name[3314:3353],
	1000060003: _StructureType_name[3353:3399],
	1000060004: _StructureType_name[3399:3448],
	1000060005: _StructureType_name[3448:3485],
	1000060006: _StructureType_name[3485:3526],
	1000060007: _StructureType_name[3526:3572],
	1000060008: _StructureType_name[3572:3612],
	1000060009: _StructureType_name[3612:3656],
	1000060010: _StructureType_name[3656:3692],
	1000060011: _StructureType_name[3692:3730],
	1000060012: _StructureType_name[3730:3776],
	1000060013: _StructureType_name[3776:3823],
	1000060014: _StructureType_name[3823:3869],
	1000061000: _StructureType_name[3869:3900],
	1000062000: _StructureType_name[3900:3934],
	1000063000: _StructureType_name[3934:3988],
	1000067000: _StructureType_name[3988:4027],
	1000067001: _StructureType_name[4027:4075],
	1000070000: _StructureType_name[4075:4120],
	1000070001: _StructureType_name[4120:4163],
	1000071000: _StructureType_name[4163:4213],
	1000071001: _StructureType_name[4213:4255],
	1000071002: _StructureType_name[4255:4300],
	1000071003: _StructureType_name[4300:4337],
	1000071004: _StructureType_name[4337:4376],
	1000072000: _StructureType_name[4376:4419],
	1000072001: _StructureType_name[4419:4461],
	1000072002: _StructureType_name[4461:4498],
	1000073000: _StructureType_name[4498:4541],
	1000073001: _StructureType_name[4541:4584],
	1000073002: _StructureType_name[4584:4627],
	1000073003: _StructureType_name[4627:4667],
	1000074000: _StructureType_name[4667:4701],
	1000074001: _StructureType_name[4701:4735],
	1000074002: _StructureType_name[4735:4766],
	1000075000: _StructureType_name[4766:4815],
	1000076000: _StructureType_name[4815:4863],
	1000076001: _StructureType_name[4863:4903],
	1000077000: _StructureType_name[4903:4941],
	1000078000: _StructureType_name[4941:4987],
	1000078001: _StructureType_name[4987:5033],
	1000078002: _StructureType_name[5033:5069],
	1000078003: _StructureType_name[5069:5112],
	1000079000: _StructureType_name[5112:5149],
	1000079001: _StructureType_name[5149:5183],
	1000080000: _StructureType_name[5183:5237],
	1000081000: _StructureType_name[5237:5301],
	1000081001: _StructureType_name[5301:5359],
	1000081002: _StructureType_name[5359:5404],
	1000083000: _StructureType_name[5404:5454],
	1000084000: _StructureType_name[5454:5484],
	1000085000: _StructureType_name[5484:5531],
	1000087000: _StructureType_name[5531:5585],
	1000090000: _StructureType_name[5585:5621],
	1000091000: _StructureType_name[5621:5653],
	1000091001: _StructureType_name[5653:5684],
	1000091002: _StructureType_name[5684:5716],
	1000091003: _StructureType_name[5716:5758],
	1000092000: _StructureType_name[5758:5793],
	1000094000: _StructureType_name[5793:5838],
	1000098000: _StructureType_name[5838:5891],
	1000099000: _StructureType_name[5891:5947],
	1000099001: _StructureType_name[5947:6002],
	1000101000: _StructureType_name[6002:6067],
	1000101001: _StructureType_name[6067:6131],
	1000105000: _StructureType_name[6131:6158],
	1000109000: _StructureType_name[6158:6196],
	1000109001: _StructureType_name[6196:6232],
	1000109002: _StructureType_name[6232:6267],
	1000109003: _StructureType_name[6267:6301],
	1000109004: _StructureType_name[6301:6338],
	1000109005: _StructureType_name[6338:6370],
	1000109006: _StructureType_name[6370:6400],
	1000111000: _StructureType_name[6400:6448],
	1000112000: _StructureType_name[6448:6492],
	1000112001: _StructureType_name[6492:6528],
	1000113000: _StructureType_name[6528:6562],
	1000114000: _StructureType_name[6562:6604],
	1000114001: _StructureType_name[6604:6646],
	1000114002: _StructureType_name[6646:6685],
	1000115000: _StructureType_name[6685:6718],
	1000115001: _StructureType_name[6718:6748],
	1000117000: _StructureType_name[6748:6798],
	1000117001: _StructureType_name[6798:6852],
	1000117002: _StructureType_name[6852:6889],
	1000117003: _StructureType_name[6889:6949],
	1000119000: _StructureType_name[6949:6991],
	1000119001: _StructureType_name[6991:7027],
	1000119002: _StructureType_name[7027:7057],
	1000120000: _StructureType_name[7057:7107],
	1000121000: _StructureType_name[7107:7141],
	1000121001: _StructureType_name[7141:7180],
	1000121002: _StructureType_name[7180:7218],
	1000121003: _StructureType_name[7218:7251],
	1000121004: _StructureType_name[7251:7292],
	1000122000: _StructureType_name[7292:7328],
	1000123000: _StructureType_name[7328:7366],
	1000127000: _StructureType_name[7366:7409],
	1000127001: _StructureType_name[7409:7452],
	1000128000: _StructureType_name[7452:7492],
	1000128001: _StructureType_name[7492:7531],
	1000128002: _StructureType_name[7531:7562],
	1000128003: _StructureType_name[7562:7609],
	1000128004: _StructureType_name[7609:7654],
	1000129000: _StructureType_name[7654:7700],
	1000129001: _StructureType_name[7700:7751],
	1000129002: _StructureType_name[7751:7808],
	1000129003: _StructureType_name[7808:7859],
	1000129004: _StructureType_name[7859:7913],
	1000129005: _StructureType_name[7913:7947],
	1000130000: _StructureType_name[7947:8006],
	1000130001: _StructureType_name[8006:8052],
	1000138000: _StructureType_name[8052:8108],
	1000138001: _StructureType_name[8108:8166],
	1000138002: _StructureType_name[8166:8218],
	1000138003: _StructureType_name[8218:8276],
	1000143000: _StructureType_name[8276:8311],
	1000143001: _StructureType_name[8311:8361],
	1000143002: _StructureType_name[8361:8415],
	1000143003: _StructureType_name[8415:8470],
	1000143004: _StructureType_name[8470:8507],
	1000145000: _StructureType_name[8507:8539],
	1000145001: _StructureType_name[8539:8589],
	1000145002: _StructureType_name[8589:8641],
	1000145003: _StructureType_name[8641:8670],
	1000146000: _StructureType_name[8670:8712],
	1000146001: _StructureType_name[8712:8753],
	1000146002: _StructureType_name[8753:8800],
	1000146003: _StructureType_name[8800:8832],
	1000146004: _StructureType_name[8832:8875],
	1000147000: _StructureType_name[8875:8916],
	1000148000: _StructureType_name[8916:8976],
	1000148001: _StructureType_name[8976:9038],
	1000148002: _StructureType_name[9038:9095],
	1000149000: _StructureType_name[9095:9148],
	1000152000: _StructureType_name[9148:9204],
	1000156000: _StructureType_name[9204:9249],
	1000156001: _StructureType_name[9249:9288],
	1000156002: _StructureType_name[9288:9325],
	1000156003: _StructureType_name[9325:9370],
	1000156004: _StructureType_name[9370:9427],
	1000156005: _StructureType_name[9427:9483],
	1000157000: _StructureType_name[9483:9519],
	1000157001: _StructureType_name[9519:9554],
	1000160000: _StructureType_name[9554:9595],
	1000160001: _StructureType_name[9595:9648],
	1000161000: _StructureType_name[9648:9705],
	1000161001: _StructureType_name[9705:9761],
	1000161002: _StructureType_name[9761:9819],
	1000161003: _StructureType_name[9819:9883],
	1000161004: _StructureType_name[9883:9948],
	1000164000: _StructureType_name[9948:10010],
	1000164001: _StructureType_name[10010:10063],
	1000164002: _StructureType_name[10063:10118],
	1000164005: _StructureType_name[10118:10181],
	1000166000: _StructureType_name[10181:10244],
	1000166001: _StructureType_name[10244:10308],
	1000168000: _StructureType_name[10308:10357],
	1000168001: _StructureType_name[10357:10396],
	1000174000: _StructureType_name[10396:10447],
	1000177000: _StructureType_name[10447:10496],
	1000178000: _StructureType_name[10496:10539],
	1000178001: _StructureType_name[10539:10582],
	1000178002: _StructureType_name[10582:10640],
	1000185000: _StructureType_name[10640:10690],
	1000190000: _StructureType_name[10690:10752],
	1000190001: _StructureType_name[10752:10809],
	1000190002: _StructureType_name[10809:10869],
	1000201000: _StructureType_name[10869:10931],
	1000202000: _StructureType_name[10931:10978],
	1000202001: _StructureType_name[10978:11027],
	1000203000: _StructureType_name[11027:11089],
	1000204000: _StructureType_name[11089:11146],
	1000205000: _StructureType_name[11146:11208],
	1000205002: _StructureType_name[11208:11261],
	1000206000: _StructureType_name[11261:11290],
	1000206001: _StructureType_name[11290:11336],
	1000211000: _StructureType_name[11336:11391],
}

func (i StructureType) String() string {
	if str, ok := _StructureType_map[i]; ok {
		return str
	}
	return "StructureType(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Success-0]
	_ = x[NotReady-1]
	_ = x[Timeout-2]
	_ = x[EventSet-3]
	_ = x[EventReset-4]
	_ = x[Incomplete-5]
	_ = x[SuboptimalKHR-1000001003]
	_ = x[ErrOutOfHostMemory - -1]
	_ = x[ErrOutOfDeviceMemory - -2]
	_ = x[ErrInitializationFailed - -3]
	_ = x[ErrDeviceLost - -4]
	_ = x[ErrMemoryMapFailed - -5]
	_ = x[ErrLayerNotPresent - -6]
	_ = x[ErrExtensionNotPresent - -7]
	_ = x[ErrFeatureNotPresent - -8]
	_ = x[ErrIncompatibleDriver - -9]
	_ = x[ErrTooManyObjects - -10]
	_ = x[ErrFormatNotSupported - -11]
	_ = x[ErrFragmentedPool - -12]
	_ = x[ErrSurfaceLostKHR - -1000000000]
	_ = x[ErrNativeWindowInUseKHR - -1000000001]
	_ = x[ErrOutOfDateKHR - -1000001004]
	_ = x[ErrIncompatibleDisplayKHR - -1000003001]
	_ = x[ErrOutOfPoolMemory - -1000069000]
	_ = x[ErrInvalidExternalHandle - -1000072003]
	_ = x[ErrValidationFailedEXT - -1000011001]
	_ = x[ErrInvalidShaderNV - -1000012000]
	_ = x[ErrFragmentationEXT - -1000161000]
	_ = x[ErrNotPermittedEXT - -1000174001]
	_ = x[ErrOutOfPoolMemoryKHR - -1000069000]
	_ = x[ErrInvalidExternalHandleKHR - -1000072003]
}

const _Result_name = "ErrNotPermittedEXTErrFragmentationEXTErrInvalidExternalHandleErrOutOfPoolMemoryErrInvalidShaderNVErrValidationFailedEXTErrIncompatibleDisplayKHRErrOutOfDateKHRErrNativeWindowInUseKHRErrSurfaceLostKHRErrFragmentedPoolErrFormatNotSupportedErrTooManyObjectsErrIncompatibleDriverErrFeatureNotPresentErrExtensionNotPresentErrLayerNotPresentErrMemoryMapFailedErrDeviceLostErrInitializationFailedErrOutOfDeviceMemoryErrOutOfHostMemorySuccessNotReadyTimeoutEventSetEventResetIncompleteSuboptimalKHR"

var _Result_map = map[Result]string{
	-1000174001: _Result_name[0:18],
	-1000161000: _Result_name[18:37],
	-1000072003: _Result_name[37:61],
	-1000069000: _Result_name[61:79],
	-1000012000: _Result_name[79:97],
	-1000011001: _Result_name[97:119],
	-1000003001: _Result_name[119:144],
	-1000001004: _Result_name[144:159],
	-1000000001: _Result_name[159:182],
	-1000000000: _Result_name[182:199],
	-12:         _Result_name[199:216],
	-11:         _Result_name[216:237],
	-10:         _Result_name[237:254],
	-9:          _Result_name[254:275],
	-8:          _Result_name[275:295],
	-7:          _Result_name[295:317],
	-6:          _Result_name[317:335],
	-5:          _Result_name[335:353],
	-4:          _Result_name[353:366],
	-3:          _Result_name[366:389],
	-2:          _Result_name[389:409],
	-1:          _Result_name[409:427],
	0:           _Result_name[427:434],
	1:           _Result_name[434:442],
	2:           _Result_name[442:449],
	3:           _Result_name[449:457],
	4:           _Result_name[457:467],
	5:           _Result_name[467:477],
	1000001003:  _Result_name[477:490],
}

func (i Result) String() string {
	if str, ok := _Result_map[i]; ok {
		return str
	}
	return "Result(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PhysicalDeviceTypeOther-0]
	_ = x[PhysicalDeviceTypeIntegratedGPU-1]
	_ = x[PhysicalDeviceTypeDiscreteGPU-2]
	_ = x[PhysicalDeviceTypeVirtualGPU-3]
	_ = x[PhysicalDeviceTypeCPU-4]
}

const _PhysicalDeviceType_name = "PhysicalDeviceTypeOtherPhysicalDeviceTypeIntegratedGPUPhysicalDeviceTypeDiscreteGPUPhysicalDeviceTypeVirtualGPUPhysicalDeviceTypeCPU"

var _PhysicalDeviceType_index = [...]uint8{0, 23, 54, 83, 111, 132}

func (i PhysicalDeviceType) String() string {
	if i >= PhysicalDeviceType(len(_PhysicalDeviceType_index)-1) {
		return "PhysicalDeviceType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _PhysicalDeviceType_name[_PhysicalDeviceType_index[i]:_PhysicalDeviceType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SharingModeExclusive-0]
	_ = x[SharingModeConcurrent-1]
}

const _SharingMode_name = "SharingModeExclusiveSharingModeConcurrent"

var _SharingMode_index = [...]uint8{0, 20, 41}

func (i SharingMode) String() string {
	if i >= SharingMode(len(_SharingMode_index)-1) {
		return "SharingMode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SharingMode_name[_SharingMode_index[i]:_SharingMode_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ImageViewType1D-0]
	_ = x[ImageViewType2D-1]
	_ = x[ImageViewType3D-2]
	_ = x[ImageViewTypeCube-3]
	_ = x[ImageViewType1DArray-4]
	_ = x[ImageViewType2DArray-5]
	_ = x[ImageViewTypeCubeArray-6]
}

const _ImageViewType_name = "ImageViewType1DImageViewType2DImageViewType3DImageViewTypeCubeImageViewType1DArrayImageViewType2DArrayImageViewTypeCubeArray"

var _ImageViewType_index = [...]uint8{0, 15, 30, 45, 62, 82, 102, 124}

func (i ImageViewType) String() string {
	if i >= ImageViewType(len(_ImageViewType_index)-1) {
		return "ImageViewType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ImageViewType_name[_ImageViewType_index[i]:_ImageViewType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ComponentSwizzleIdentity-0]
	_ = x[ComponentSwizzleZero-1]
	_ = x[ComponentSwizzleOne-2]
	_ = x[ComponentSwizzleR-3]
	_ = x[ComponentSwizzleG-4]
	_ = x[ComponentSwizzleB-5]
	_ = x[ComponentSwizzleA-6]
}

const _ComponentSwizzle_name = "ComponentSwizzleIdentityComponentSwizzleZeroComponentSwizzleOneComponentSwizzleRComponentSwizzleGComponentSwizzleBComponentSwizzleA"

var _ComponentSwizzle_index = [...]uint8{0, 24, 44, 63, 80, 97, 114, 131}

func (i ComponentSwizzle) String() string {
	if i >= ComponentSwizzle(len(_ComponentSwizzle_index)-1) {
		return "ComponentSwizzle(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ComponentSwizzle_name[_ComponentSwizzle_index[i]:_ComponentSwizzle_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[VertexInputRateVertex-0]
	_ = x[VertexInputRateInstance-1]
}

const _VertexInputRate_name = "VertexInputRateVertexVertexInputRateInstance"

var _VertexInputRate_index = [...]uint8{0, 21, 44}

func (i VertexInputRate) String() string {
	if i >= VertexInputRate(len(_VertexInputRate_index)-1) {
		return "VertexInputRate(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _VertexInputRate_name[_VertexInputRate_index[i]:_VertexInputRate_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PrimitiveTopologyPointList-0]
	_ = x[PrimitiveTopologyLineList-1]
	_ = x[PrimitiveTopologyLineStrip-2]
	_ = x[PrimitiveTopologyTriangleList-3]
	_ = x[PrimitiveTopologyTriangleStrip-4]
	_ = x[PrimitiveTopologyTriangleFan-5]
	_ = x[PrimitiveTopologyLineListWithAdjacency-6]
	_ = x[PrimitiveTopologyLineStripWithAdjacency-7]
	_ = x[PrimitiveTopologyTriangleListWithAdjacency-8]
	_ = x[PrimitiveTopologyTriangleStripWithAdjacency-9]
	_ = x[PrimitiveTopologyPatchList-10]
}

const _PrimitiveTopology_name = "PrimitiveTopologyPointListPrimitiveTopologyLineListPrimitiveTopologyLineStripPrimitiveTopologyTriangleListPrimitiveTopologyTriangleStripPrimitiveTopologyTriangleFanPrimitiveTopologyLineListWithAdjacencyPrimitiveTopologyLineStripWithAdjacencyPrimitiveTopologyTriangleListWithAdjacencyPrimitiveTopologyTriangleStripWithAdjacencyPrimitiveTopologyPatchList"

var _PrimitiveTopology_index = [...]uint16{0, 26, 51, 77, 106, 136, 164, 202, 241, 283, 326, 352}

func (i PrimitiveTopology) String() string {
	if i >= PrimitiveTopology(len(_PrimitiveTopology_index)-1) {
		return "PrimitiveTopology(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _PrimitiveTopology_name[_PrimitiveTopology_index[i]:_PrimitiveTopology_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PolygonModeFill-0]
	_ = x[PolygonModeLine-1]
	_ = x[PolygonModePoint-2]
	_ = x[PolygonModeFillRectangleNV-1000153000]
}

const (
	_PolygonMode_name_0 = "PolygonModeFillPolygonModeLinePolygonModePoint"
	_PolygonMode_name_1 = "PolygonModeFillRectangleNV"
)

var (
	_PolygonMode_index_0 = [...]uint8{0, 15, 30, 46}
)

func (i PolygonMode) String() string {
	switch {
	case i <= 2:
		return _PolygonMode_name_0[_PolygonMode_index_0[i]:_PolygonMode_index_0[i+1]]
	case i == 1000153000:
		return _PolygonMode_name_1
	default:
		return "PolygonMode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[FrontFaceCounterClockwise-0]
	_ = x[FrontFaceClockwise-1]
}

const _FrontFace_name = "FrontFaceCounterClockwiseFrontFaceClockwise"

var _FrontFace_index = [...]uint8{0, 25, 43}

func (i FrontFace) String() string {
	if i >= FrontFace(len(_FrontFace_index)-1) {
		return "FrontFace(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _FrontFace_name[_FrontFace_index[i]:_FrontFace_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BlendFactorZero-0]
	_ = x[BlendFactorOne-1]
	_ = x[BlendFactorSrcColor-2]
	_ = x[BlendFactorOneMinusSrcColor-3]
	_ = x[BlendFactorDstColor-4]
	_ = x[BlendFactorOneMinusDstColor-5]
	_ = x[BlendFactorSrcAlpha-6]
	_ = x[BlendFactorOneMinusSrcAlpha-7]
	_ = x[BlendFactorDstAlpha-8]
	_ = x[BlendFactorOneMinusDstAlpha-9]
	_ = x[BlendFactorConstantColor-10]
	_ = x[BlendFactorOneMinusConstantColor-11]
	_ = x[BlendFactorConstantAlpha-12]
	_ = x[BlendFactorOneMinusConstantAlpha-13]
	_ = x[BlendFactorSrcAlphaSaturate-14]
	_ = x[BlendFactorSrc1Color-15]
	_ = x[BlendFactorOneMinusSrc1Color-16]
	_ = x[BlendFactorSrc1Alpha-17]
	_ = x[BlendFactorOneMinusSrc1Alpha-18]
}

const _BlendFactor_name = "BlendFactorZeroBlendFactorOneBlendFactorSrcColorBlendFactorOneMinusSrcColorBlendFactorDstColorBlendFactorOneMinusDstColorBlendFactorSrcAlphaBlendFactorOneMinusSrcAlphaBlendFactorDstAlphaBlendFactorOneMinusDstAlphaBlendFactorConstantColorBlendFactorOneMinusConstantColorBlendFactorConstantAlphaBlendFactorOneMinusConstantAlphaBlendFactorSrcAlphaSaturateBlendFactorSrc1ColorBlendFactorOneMinusSrc1ColorBlendFactorSrc1AlphaBlendFactorOneMinusSrc1Alpha"

var _BlendFactor_index = [...]uint16{0, 15, 29, 48, 75, 94, 121, 140, 167, 186, 213, 237, 269, 293, 325, 352, 372, 400, 420, 448}

func (i BlendFactor) String() string {
	if i >= BlendFactor(len(_BlendFactor_index)-1) {
		return "BlendFactor(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _BlendFactor_name[_BlendFactor_index[i]:_BlendFactor_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BlendOpAdd-0]
	_ = x[BlendOpSubtract-1]
	_ = x[BlendOpReverseSubtract-2]
	_ = x[BlendOpMin-3]
	_ = x[BlendOpMax-4]
	_ = x[BlendOpZeroEXT-1000148000]
	_ = x[BlendOpSrcEXT-1000148001]
	_ = x[BlendOpDstEXT-1000148002]
	_ = x[BlendOpSrcOverEXT-1000148003]
	_ = x[BlendOpDstOverEXT-1000148004]
	_ = x[BlendOpSrcInEXT-1000148005]
	_ = x[BlendOpDstInEXT-1000148006]
	_ = x[BlendOpSrcOutEXT-1000148007]
	_ = x[BlendOpDstOutEXT-1000148008]
	_ = x[BlendOpSrcAtopEXT-1000148009]
	_ = x[BlendOpDstAtopEXT-1000148010]
	_ = x[BlendOpXorEXT-1000148011]
	_ = x[BlendOpMultiplyEXT-1000148012]
	_ = x[BlendOpScreenEXT-1000148013]
	_ = x[BlendOpOverlayEXT-1000148014]
	_ = x[BlendOpDarkenEXT-1000148015]
	_ = x[BlendOpLightenEXT-1000148016]
	_ = x[BlendOpColordodgeEXT-1000148017]
	_ = x[BlendOpColorburnEXT-1000148018]
	_ = x[BlendOpHardlightEXT-1000148019]
	_ = x[BlendOpSoftlightEXT-1000148020]
	_ = x[BlendOpDifferenceEXT-1000148021]
	_ = x[BlendOpExclusionEXT-1000148022]
	_ = x[BlendOpInvertEXT-1000148023]
	_ = x[BlendOpInvertRGB_EXT-1000148024]
	_ = x[BlendOpLineardodgeEXT-1000148025]
	_ = x[BlendOpLinearburnEXT-1000148026]
	_ = x[BlendOpVividlightEXT-1000148027]
	_ = x[BlendOpLinearlightEXT-1000148028]
	_ = x[BlendOpPinlightEXT-1000148029]
	_ = x[BlendOpHardmixEXT-1000148030]
	_ = x[BlendOpHSLHueEXT-1000148031]
	_ = x[BlendOpHSLSaturationEXT-1000148032]
	_ = x[BlendOpHSLColorEXT-1000148033]
	_ = x[BlendOpHSLLuminosityEXT-1000148034]
	_ = x[BlendOpPlusEXT-1000148035]
	_ = x[BlendOpPlusClampedEXT-1000148036]
	_ = x[BlendOpPlusClampedAlphaEXT-1000148037]
	_ = x[BlendOpPlusDarkerEXT-1000148038]
	_ = x[BlendOpMinusEXT-1000148039]
	_ = x[BlendOpMinusClampedEXT-1000148040]
	_ = x[BlendOpContrastEXT-1000148041]
	_ = x[BlendOpInvertOVG_EXT-1000148042]
	_ = x[BlendOpRedEXT-1000148043]
	_ = x[BlendOpGreenEXT-1000148044]
	_ = x[BlendOpBlueEXT-1000148045]
}

const (
	_BlendOp_name_0 = "BlendOpAddBlendOpSubtractBlendOpReverseSubtractBlendOpMinBlendOpMax"
	_BlendOp_name_1 = "BlendOpZeroEXTBlendOpSrcEXTBlendOpDstEXTBlendOpSrcOverEXTBlendOpDstOverEXTBlendOpSrcInEXTBlendOpDstInEXTBlendOpSrcOutEXTBlendOpDstOutEXTBlendOpSrcAtopEXTBlendOpDstAtopEXTBlendOpXorEXTBlendOpMultiplyEXTBlendOpScreenEXTBlendOpOverlayEXTBlendOpDarkenEXTBlendOpLightenEXTBlendOpColordodgeEXTBlendOpColorburnEXTBlendOpHardlightEXTBlendOpSoftlightEXTBlendOpDifferenceEXTBlendOpExclusionEXTBlendOpInvertEXTBlendOpInvertRGB_EXTBlendOpLineardodgeEXTBlendOpLinearburnEXTBlendOpVividlightEXTBlendOpLinearlightEXTBlendOpPinlightEXTBlendOpHardmixEXTBlendOpHSLHueEXTBlendOpHSLSaturationEXTBlendOpHSLColorEXTBlendOpHSLLuminosityEXTBlendOpPlusEXTBlendOpPlusClampedEXTBlendOpPlusClampedAlphaEXTBlendOpPlusDarkerEXTBlendOpMinusEXTBlendOpMinusClampedEXTBlendOpContrastEXTBlendOpInvertOVG_EXTBlendOpRedEXTBlendOpGreenEXTBlendOpBlueEXT"
)

var (
	_BlendOp_index_0 = [...]uint8{0, 10, 25, 47, 57, 67}
	_BlendOp_index_1 = [...]uint16{0, 14, 27, 40, 57, 74, 89, 104, 120, 136, 153, 170, 183, 201, 217, 234, 250, 267, 287, 306, 325, 344, 364, 383, 399, 419, 440, 460, 480, 501, 519, 536, 552, 575, 593, 616, 630, 651, 677, 697, 712, 734, 752, 772, 785, 800, 814}
)

func (i BlendOp) String() string {
	switch {
	case i <= 4:
		return _BlendOp_name_0[_BlendOp_index_0[i]:_BlendOp_index_0[i+1]]
	case 1000148000 <= i && i <= 1000148045:
		i -= 1000148000
		return _BlendOp_name_1[_BlendOp_index_1[i]:_BlendOp_index_1[i+1]]
	default:
		return "BlendOp(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LogicOpClear-0]
	_ = x[LogicOpAnd-1]
	_ = x[LogicOpAndReverse-2]
	_ = x[LogicOpCopy-3]
	_ = x[LogicOpAndInverted-4]
	_ = x[LogicOpNoOp-5]
	_ = x[LogicOpXor-6]
	_ = x[LogicOpOr-7]
	_ = x[LogicOpNor-8]
	_ = x[LogicOpEquivalent-9]
	_ = x[LogicOpInvert-10]
	_ = x[LogicOpOrReverse-11]
	_ = x[LogicOpCopyInverted-12]
	_ = x[LogicOpOrInverted-13]
	_ = x[LogicOpNand-14]
	_ = x[LogicOpSet-15]
}

const _LogicOp_name = "LogicOpClearLogicOpAndLogicOpAndReverseLogicOpCopyLogicOpAndInvertedLogicOpNoOpLogicOpXorLogicOpOrLogicOpNorLogicOpEquivalentLogicOpInvertLogicOpOrReverseLogicOpCopyInvertedLogicOpOrInvertedLogicOpNandLogicOpSet"

var _LogicOp_index = [...]uint8{0, 12, 22, 39, 50, 68, 79, 89, 98, 108, 125, 138, 154, 173, 190, 201, 211}

func (i LogicOp) String() string {
	if i >= LogicOp(len(_LogicOp_index)-1) {
		return "LogicOp(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _LogicOp_name[_LogicOp_index[i]:_LogicOp_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DynamicStateViewport-0]
	_ = x[DynamicStateScissor-1]
	_ = x[DynamicStateLineWidth-2]
	_ = x[DynamicStateDepthBias-3]
	_ = x[DynamicStateBlendConstants-4]
	_ = x[DynamicStateDepthBounds-5]
	_ = x[DynamicStateStencilCompareMask-6]
	_ = x[DynamicStateStencilWriteMask-7]
	_ = x[DynamicStateStencilReference-8]
	_ = x[DynamicStateViewportWScalingNV-1000087000]
	_ = x[DynamicStateDiscardRectangleEXT-1000099000]
	_ = x[DynamicStateSampleLocationsEXT-1000143000]
	_ = x[DynamicStateViewportShadingRatePaletteNV-1000164004]
	_ = x[DynamicStateViewportCoarseSampleOrderNV-1000164006]
	_ = x[DynamicStateExclusiveScissorNV-1000205001]
}

const (
	_DynamicState_name_0 = "DynamicStateViewportDynamicStateScissorDynamicStateLineWidthDynamicStateDepthBiasDynamicStateBlendConstantsDynamicStateDepthBoundsDynamicStateStencilCompareMaskDynamicStateStencilWriteMaskDynamicStateStencilReference"
	_DynamicState_name_1 = "DynamicStateViewportWScalingNV"
	_DynamicState_name_2 = "DynamicStateDiscardRectangleEXT"
	_DynamicState_name_3 = "DynamicStateSampleLocationsEXT"
	_DynamicState_name_4 = "DynamicStateViewportShadingRatePaletteNV"
	_DynamicState_name_5 = "DynamicStateViewportCoarseSampleOrderNV"
	_DynamicState_name_6 = "DynamicStateExclusiveScissorNV"
)

var (
	_DynamicState_index_0 = [...]uint8{0, 20, 39, 60, 81, 107, 130, 160, 188, 216}
)

func (i DynamicState) String() string {
	switch {
	case i <= 8:
		return _DynamicState_name_0[_DynamicState_index_0[i]:_DynamicState_index_0[i+1]]
	case i == 1000087000:
		return _DynamicState_name_1
	case i == 1000099000:
		return _DynamicState_name_2
	case i == 1000143000:
		return _DynamicState_name_3
	case i == 1000164004:
		return _DynamicState_name_4
	case i == 1000164006:
		return _DynamicState_name_5
	case i == 1000205001:
		return _DynamicState_name_6
	default:
		return "DynamicState(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CompareOpNever-0]
	_ = x[CompareOpLess-1]
	_ = x[CompareOpEqual-2]
	_ = x[CompareOpLessOrEqual-3]
	_ = x[CompareOpGreater-4]
	_ = x[CompareOpNotEqual-5]
	_ = x[CompareOpGreaterOrEqual-6]
	_ = x[CompareOpAlways-7]
}

const _CompareOp_name = "CompareOpNeverCompareOpLessCompareOpEqualCompareOpLessOrEqualCompareOpGreaterCompareOpNotEqualCompareOpGreaterOrEqualCompareOpAlways"

var _CompareOp_index = [...]uint8{0, 14, 27, 41, 61, 77, 94, 117, 132}

func (i CompareOp) String() string {
	if i >= CompareOp(len(_CompareOp_index)-1) {
		return "CompareOp(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _CompareOp_name[_CompareOp_index[i]:_CompareOp_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[StencilOpKeep-0]
	_ = x[StencilOpZero-1]
	_ = x[StencilOpReplace-2]
	_ = x[StencilOpIncrementAndClamp-3]
	_ = x[StencilOpDecrementAndClamp-4]
	_ = x[StencilOpInvert-5]
	_ = x[StencilOpIncrementAndWrap-6]
	_ = x[StencilOpDecrementAndWrap-7]
}

const _StencilOp_name = "StencilOpKeepStencilOpZeroStencilOpReplaceStencilOpIncrementAndClampStencilOpDecrementAndClampStencilOpInvertStencilOpIncrementAndWrapStencilOpDecrementAndWrap"

var _StencilOp_index = [...]uint8{0, 13, 26, 42, 68, 94, 109, 134, 159}

func (i StencilOp) String() string {
	if i >= StencilOp(len(_StencilOp_index)-1) {
		return "StencilOp(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _StencilOp_name[_StencilOp_index[i]:_StencilOp_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AttachmentLoadOpLoad-0]
	_ = x[AttachmentLoadOpClear-1]
	_ = x[AttachmentLoadOpDontCare-2]
}

const _AttachmentLoadOp_name = "AttachmentLoadOpLoadAttachmentLoadOpClearAttachmentLoadOpDontCare"

var _AttachmentLoadOp_index = [...]uint8{0, 20, 41, 65}

func (i AttachmentLoadOp) String() string {
	if i >= AttachmentLoadOp(len(_AttachmentLoadOp_index)-1) {
		return "AttachmentLoadOp(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _AttachmentLoadOp_name[_AttachmentLoadOp_index[i]:_AttachmentLoadOp_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AttachmentStoreOpStore-0]
	_ = x[AttachmentStoreOpDontCare-1]
}

const _AttachmentStoreOp_name = "AttachmentStoreOpStoreAttachmentStoreOpDontCare"

var _AttachmentStoreOp_index = [...]uint8{0, 22, 47}

func (i AttachmentStoreOp) String() string {
	if i >= AttachmentStoreOp(len(_AttachmentStoreOp_index)-1) {
		return "AttachmentStoreOp(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _AttachmentStoreOp_name[_AttachmentStoreOp_index[i]:_AttachmentStoreOp_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ImageLayoutUndefined-0]
	_ = x[ImageLayoutGeneral-1]
	_ = x[ImageLayoutColorAttachmentOptimal-2]
	_ = x[ImageLayoutDepthStencilAttachmentOptimal-3]
	_ = x[ImageLayoutDepthStencilReadOnlyOptimal-4]
	_ = x[ImageLayoutShaderReadOnlyOptimal-5]
	_ = x[ImageLayoutTransferSrcOptimal-6]
	_ = x[ImageLayoutTransferDstOptimal-7]
	_ = x[ImageLayoutPreinitialized-8]
	_ = x[ImageLayoutDepthReadOnlyStencilAttachmentOptimal-1000117000]
	_ = x[ImageLayoutDepthAttachmentStencilReadOnlyOptimal-1000117001]
	_ = x[ImageLayoutPresentSrcKHR-1000001002]
	_ = x[ImageLayoutSharedPresentKHR-1000111000]
	_ = x[ImageLayoutShadingRateOptimalNV-1000164003]
	_ = x[ImageLayoutDepthReadOnlyStencilAttachmentOptimalKHR-1000117000]
	_ = x[ImageLayoutDepthAttachmentStencilReadOnlyOptimalKHR-1000117001]
}

const (
	_ImageLayout_name_0 = "ImageLayoutUndefinedImageLayoutGeneralImageLayoutColorAttachmentOptimalImageLayoutDepthStencilAttachmentOptimalImageLayoutDepthStencilReadOnlyOptimalImageLayoutShaderReadOnlyOptimalImageLayoutTransferSrcOptimalImageLayoutTransferDstOptimalImageLayoutPreinitialized"
	_ImageLayout_name_1 = "ImageLayoutPresentSrcKHR"
	_ImageLayout_name_2 = "ImageLayoutSharedPresentKHR"
	_ImageLayout_name_3 = "ImageLayoutDepthReadOnlyStencilAttachmentOptimalImageLayoutDepthAttachmentStencilReadOnlyOptimal"
	_ImageLayout_name_4 = "ImageLayoutShadingRateOptimalNV"
)

var (
	_ImageLayout_index_0 = [...]uint16{0, 20, 38, 71, 111, 149, 181, 210, 239, 264}
	_ImageLayout_index_3 = [...]uint8{0, 48, 96}
)

func (i ImageLayout) String() string {
	switch {
	case i <= 8:
		return _ImageLayout_name_0[_ImageLayout_index_0[i]:_ImageLayout_index_0[i+1]]
	case i == 1000001002:
		return _ImageLayout_name_1
	case i == 1000111000:
		return _ImageLayout_name_2
	case 1000117000 <= i && i <= 1000117001:
		i -= 1000117000
		return _ImageLayout_name_3[_ImageLayout_index_3[i]:_ImageLayout_index_3[i+1]]
	case i == 1000164003:
		return _ImageLayout_name_4
	default:
		return "ImageLayout(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PipelineBindPointGraphics-0]
	_ = x[PipelineBindPointCompute-1]
}

const _PipelineBindPoint_name = "PipelineBindPointGraphicsPipelineBindPointCompute"

var _PipelineBindPoint_index = [...]uint8{0, 25, 49}

func (i PipelineBindPoint) String() string {
	if i >= PipelineBindPoint(len(_PipelineBindPoint_index)-1) {
		return "PipelineBindPoint(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _PipelineBindPoint_name[_PipelineBindPoint_index[i]:_PipelineBindPoint_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SubpassContentsInline-0]
	_ = x[SubpassContentsSecondaryCommandBuffers-1]
}

const _SubpassContents_name = "SubpassContentsInlineSubpassContentsSecondaryCommandBuffers"

var _SubpassContents_index = [...]uint8{0, 21, 59}

func (i SubpassContents) String() string {
	if i >= SubpassContents(len(_SubpassContents_index)-1) {
		return "SubpassContents(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SubpassContents_name[_SubpassContents_index[i]:_SubpassContents_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ImageTilingOptimal-0]
	_ = x[ImageTilingLinear-1]
	_ = x[ImageTilingDrmFormatModifierEXT-1000158000]
}

const (
	_ImageTiling_name_0 = "ImageTilingOptimalImageTilingLinear"
	_ImageTiling_name_1 = "ImageTilingDrmFormatModifierEXT"
)

var (
	_ImageTiling_index_0 = [...]uint8{0, 18, 35}
)

func (i ImageTiling) String() string {
	switch {
	case i <= 1:
		return _ImageTiling_name_0[_ImageTiling_index_0[i]:_ImageTiling_index_0[i+1]]
	case i == 1000158000:
		return _ImageTiling_name_1
	default:
		return "ImageTiling(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ImageType1D-0]
	_ = x[ImageType2D-1]
	_ = x[ImageType3D-2]
}

const _ImageType_name = "ImageType1DImageType2DImageType3D"

var _ImageType_index = [...]uint8{0, 11, 22, 33}

func (i ImageType) String() string {
	if i >= ImageType(len(_ImageType_index)-1) {
		return "ImageType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ImageType_name[_ImageType_index[i]:_ImageType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[IndexTypeUint16-0]
	_ = x[IndexTypeUint32-1]
}

const _IndexType_name = "IndexTypeUint16IndexTypeUint32"

var _IndexType_index = [...]uint8{0, 15, 30}

func (i IndexType) String() string {
	if i >= IndexType(len(_IndexType_index)-1) {
		return "IndexType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _IndexType_name[_IndexType_index[i]:_IndexType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[QueryTypeOcclusion-0]
	_ = x[QueryTypePipelineStatistics-1]
	_ = x[QueryTypeTimestamp-2]
	_ = x[QueryTypeTransformFeedbackStreamEXT-1000028004]
}

const (
	_QueryType_name_0 = "QueryTypeOcclusionQueryTypePipelineStatisticsQueryTypeTimestamp"
	_QueryType_name_1 = "QueryTypeTransformFeedbackStreamEXT"
)

var (
	_QueryType_index_0 = [...]uint8{0, 18, 45, 63}
)

func (i QueryType) String() string {
	switch {
	case i <= 2:
		return _QueryType_name_0[_QueryType_index_0[i]:_QueryType_index_0[i+1]]
	case i == 1000028004:
		return _QueryType_name_1
	default:
		return "QueryType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[FilterNearest-0]
	_ = x[FilterLinear-1]
	_ = x[FilterCubicIMG-1000015000]
}

const (
	_Filter_name_0 = "FilterNearestFilterLinear"
	_Filter_name_1 = "FilterCubicIMG"
)

var (
	_Filter_index_0 = [...]uint8{0, 13, 25}
)

func (i Filter) String() string {
	switch {
	case i <= 1:
		return _Filter_name_0[_Filter_index_0[i]:_Filter_index_0[i+1]]
	case i == 1000015000:
		return _Filter_name_1
	default:
		return "Filter(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SamplerAddressModeRepeat-0]
	_ = x[SamplerAddressModeMirroredRepeat-1]
	_ = x[SamplerAddressModeClampToEdge-2]
	_ = x[SamplerAddressModeClampToBorder-3]
	_ = x[SamplerAddressModeMirrorClampToEdge-4]
}

const _SamplerAddressMode_name = "SamplerAddressModeRepeatSamplerAddressModeMirroredRepeatSamplerAddressModeClampToEdgeSamplerAddressModeClampToBorderSamplerAddressModeMirrorClampToEdge"

var _SamplerAddressMode_index = [...]uint8{0, 24, 56, 85, 116, 151}

func (i SamplerAddressMode) String() string {
	if i >= SamplerAddressMode(len(_SamplerAddressMode_index)-1) {
		return "SamplerAddressMode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SamplerAddressMode_name[_SamplerAddressMode_index[i]:_SamplerAddressMode_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SamplerMipmapModeNearest-0]
	_ = x[SamplerMipmapModeLinear-1]
}

const _SamplerMipmapMode_name = "SamplerMipmapModeNearestSamplerMipmapModeLinear"

var _SamplerMipmapMode_index = [...]uint8{0, 24, 47}

func (i SamplerMipmapMode) String() string {
	if i >= SamplerMipmapMode(len(_SamplerMipmapMode_index)-1) {
		return "SamplerMipmapMode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SamplerMipmapMode_name[_SamplerMipmapMode_index[i]:_SamplerMipmapMode_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BorderColorFloatTransparentBlack-0]
	_ = x[BorderColorIntTransparentBlack-1]
	_ = x[BorderColorFloatOpaqueBlack-2]
	_ = x[BorderColorIntOpaqueBlack-3]
	_ = x[BorderColorFloatOpaqueWhite-4]
	_ = x[BorderColorIntOpaqueWhite-5]
}

const _BorderColor_name = "BorderColorFloatTransparentBlackBorderColorIntTransparentBlackBorderColorFloatOpaqueBlackBorderColorIntOpaqueBlackBorderColorFloatOpaqueWhiteBorderColorIntOpaqueWhite"

var _BorderColor_index = [...]uint8{0, 32, 62, 89, 114, 141, 166}

func (i BorderColor) String() string {
	if i >= BorderColor(len(_BorderColor_index)-1) {
		return "BorderColor(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _BorderColor_name[_BorderColor_index[i]:_BorderColor_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DescriptorTypeSampler-0]
	_ = x[DescriptorTypeCombinedImageSampler-1]
	_ = x[DescriptorTypeSampledImage-2]
	_ = x[DescriptorTypeStorageImage-3]
	_ = x[DescriptorTypeUniformTexelBuffer-4]
	_ = x[DescriptorTypeStorageTexelBuffer-5]
	_ = x[DescriptorTypeUniformBuffer-6]
	_ = x[DescriptorTypeStorageBuffer-7]
	_ = x[DescriptorTypeUniformBufferDynamic-8]
	_ = x[DescriptorTypeStorageBufferDynamic-9]
	_ = x[DescriptorTypeInputAttachment-10]
	_ = x[DescriptorTypeInlineUniformBlockEXT-1000138000]
}

const (
	_DescriptorType_name_0 = "DescriptorTypeSamplerDescriptorTypeCombinedImageSamplerDescriptorTypeSampledImageDescriptorTypeStorageImageDescriptorTypeUniformTexelBufferDescriptorTypeStorageTexelBufferDescriptorTypeUniformBufferDescriptorTypeStorageBufferDescriptorTypeUniformBufferDynamicDescriptorTypeStorageBufferDynamicDescriptorTypeInputAttachment"
	_DescriptorType_name_1 = "DescriptorTypeInlineUniformBlockEXT"
)

var (
	_DescriptorType_index_0 = [...]uint16{0, 21, 55, 81, 107, 139, 171, 198, 225, 259, 293, 322}
)

func (i DescriptorType) String() string {
	switch {
	case i <= 10:
		return _DescriptorType_name_0[_DescriptorType_index_0[i]:_DescriptorType_index_0[i+1]]
	case i == 1000138000:
		return _DescriptorType_name_1
	default:
		return "DescriptorType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
