// Code generated by "stringer -output flags_string.go -type=PresentModeKHR,CommandBufferLevel,ColorSpaceKHR,Format,StructureType,Result,PhysicalDeviceType,SharingMode,ImageViewType,ComponentSwizzle,VertexInputRate,PrimitiveTopology,PolygonMode,FrontFace,BlendFactor,BlendOp,LogicOp,DynamicState,CompareOp,StencilOp,AttachmentLoadOp,AttachmentStoreOp,ImageLayout,PipelineBindPoint,SubpassContents"; DO NOT EDIT.

package vk

import "strconv"

const (
	_PresentModeKHR_name_0 = "PresentModeImmediateKHRPresentModeMailboxKHRPresentModeFifoKHRPresentModeFifoRelaxedKHR"
	_PresentModeKHR_name_1 = "PresentModeSharedDemandRefreshKHRPresentModeSharedContinuousRefreshKHR"
)

var (
	_PresentModeKHR_index_0 = [...]uint8{0, 23, 44, 62, 87}
	_PresentModeKHR_index_1 = [...]uint8{0, 33, 70}
)

func (i PresentModeKHR) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _PresentModeKHR_name_0[_PresentModeKHR_index_0[i]:_PresentModeKHR_index_0[i+1]]
	case 1000111000 <= i && i <= 1000111001:
		i -= 1000111000
		return _PresentModeKHR_name_1[_PresentModeKHR_index_1[i]:_PresentModeKHR_index_1[i+1]]
	default:
		return "PresentModeKHR(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const _CommandBufferLevel_name = "CommandBufferLevelPrimaryCommandBufferLevelSecondary"

var _CommandBufferLevel_index = [...]uint8{0, 25, 52}

func (i CommandBufferLevel) String() string {
	if i >= CommandBufferLevel(len(_CommandBufferLevel_index)-1) {
		return "CommandBufferLevel(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _CommandBufferLevel_name[_CommandBufferLevel_index[i]:_CommandBufferLevel_index[i+1]]
}

const _ColorSpaceKHR_name = "COLOR_SPACE_SRGB_NONLINEAR_KHR"

var _ColorSpaceKHR_index = [...]uint8{0, 30}

func (i ColorSpaceKHR) String() string {
	if i >= ColorSpaceKHR(len(_ColorSpaceKHR_index)-1) {
		return "ColorSpaceKHR(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ColorSpaceKHR_name[_ColorSpaceKHR_index[i]:_ColorSpaceKHR_index[i+1]]
}

const _Format_name = "FormatUndefinedFormatR4G4_UNORM_PACK8FormatR4G4B4A4_UNORM_PACK16FormatB4G4R4A4_UNORM_PACK16FormatR5G6B5_UNORM_PACK16FormatB5G6R5_UNORM_PACK16FormatR5G5B5A1_UNORM_PACK16FormatB5G5R5A1_UNORM_PACK16FormatA1R5G5B5_UNORM_PACK16FormatR8_UNORMFormatR8_SNORMFormatR8_USCALEDFormatR8_SSCALEDFormatR8_UINTFormatR8_SINTFormatR8_SRGBFormatR8G8_UNORMFormatR8G8_SNORMFormatR8G8_USCALEDFormatR8G8_SSCALEDFormatR8G8_UINTFormatR8G8_SINTFormatR8G8_SRGBFormatR8G8B8_UNORMFormatR8G8B8_SNORMFormatR8G8B8_USCALEDFormatR8G8B8_SSCALEDFormatR8G8B8_UINTFormatR8G8B8_SINTFormatR8G8B8_SRGBFormatB8G8R8_UNORMFormatB8G8R8_SNORMFormatB8G8R8_USCALEDFormatB8G8R8_SSCALEDFormatB8G8R8_UINTFormatB8G8R8_SINTFormatB8G8R8_SRGBFormatR8G8B8A8_UNORMFormatR8G8B8A8_SNORMFormatR8G8B8A8_USCALEDFormatR8G8B8A8_SSCALEDFormatR8G8B8A8_UINTFormatR8G8B8A8_SINTFormatR8G8B8A8_SRGBFormatB8G8R8A8_UNORMFormatB8G8R8A8_SNORMFormatB8G8R8A8_USCALEDFormatB8G8R8A8_SSCALEDFormatB8G8R8A8_UINTFormatB8G8R8A8_SINTFormatB8G8R8A8_SRGBFormatA8B8G8R8_UNORM_PACK32FormatA8B8G8R8_SNORM_PACK32FormatA8B8G8R8_USCALED_PACK32FormatA8B8G8R8_SSCALED_PACK32FormatA8B8G8R8_UINT_PACK32FormatA8B8G8R8_SINT_PACK32FormatA8B8G8R8_SRGB_PACK32FormatA2R10G10B10_UNORM_PACK32FormatA2R10G10B10_SNORM_PACK32FormatA2R10G10B10_USCALED_PACK32FormatA2R10G10B10_SSCALED_PACK32FormatA2R10G10B10_UINT_PACK32FormatA2R10G10B10_SINT_PACK32FormatA2B10G10R10_UNORM_PACK32FormatA2B10G10R10_SNORM_PACK32FormatA2B10G10R10_USCALED_PACK32FormatA2B10G10R10_SSCALED_PACK32FormatA2B10G10R10_UINT_PACK32FormatA2B10G10R10_SINT_PACK32FormatR16_UNORMFormatR16_SNORMFormatR16_USCALEDFormatR16_SSCALEDFormatR16_UINTFormatR16_SINTFormatR16_SFLOATFormatR16G16_UNORMFormatR16G16_SNORMFormatR16G16_USCALEDFormatR16G16_SSCALEDFormatR16G16_UINTFormatR16G16_SINTFormatR16G16_SFLOATFormatR16G16B16_UNORMFormatR16G16B16_SNORMFormatR16G16B16_USCALEDFormatR16G16B16_SSCALEDFormatR16G16B16_UINTFormatR16G16B16_SINTFormatR16G16B16_SFLOATFormatR16G16B16A16_UNORMFormatR16G16B16A16_SNORMFormatR16G16B16A16_USCALEDFormatR16G16B16A16_SSCALEDFormatR16G16B16A16_UINTFormatR16G16B16A16_SINTFormatR16G16B16A16_SFLOATFormatR32_UINTFormatR32_SINTFormatR32_SFLOATFormatR32G32_UINTFormatR32G32_SINTFormatR32G32_SFLOATFormatR32G32B32_UINTFormatR32G32B32_SINTFormatR32G32B32_SFLOATFormatR32G32B32A32_UINTFormatR32G32B32A32_SINTFormatR32G32B32A32_SFLOATFormatR64_UINTFormatR64_SINTFormatR64_SFLOATFormatR64G64_UINTFormatR64G64_SINTFormatR64G64_SFLOATFormatR64G64B64_UINTFormatR64G64B64_SINTFormatR64G64B64_SFLOATFormatR64G64B64A64_UINTFormatR64G64B64A64_SINTFormatR64G64B64A64_SFLOATFormatB10G11R11_UFLOAT_PACK32FormatE5B9G9R9_UFLOAT_PACK32FormatD16_UNORMFormatX8_D24_UNORM_PACK32FormatD32_SFLOATFormatS8_UINTFormatD16_UNORM_S8_UINTFormatD24_UNORM_S8_UINTFormatD32_SFLOAT_S8_UINTFormatBC1_RGB_UNORM_BLOCKFormatBC1_RGB_SRGB_BLOCKFormatBC1_RGBA_UNORM_BLOCKFormatBC1_RGBA_SRGB_BLOCKFormatBC2_UNORM_BLOCKFormatBC2_SRGB_BLOCKFormatBC3_UNORM_BLOCKFormatBC3_SRGB_BLOCKFormatBC4_UNORM_BLOCKFormatBC4_SNORM_BLOCKFormatBC5_UNORM_BLOCKFormatBC5_SNORM_BLOCKFormatBC6H_UFLOAT_BLOCKFormatBC6H_SFLOAT_BLOCKFormatBC7_UNORM_BLOCKFormatBC7_SRGB_BLOCKFormatETC2_R8G8B8_UNORM_BLOCKFormatETC2_R8G8B8_SRGB_BLOCKFormatETC2_R8G8B8A1_UNORM_BLOCKFormatETC2_R8G8B8A1_SRGB_BLOCKFormatETC2_R8G8B8A8_UNORM_BLOCKFormatETC2_R8G8B8A8_SRGB_BLOCKFormatEAC_R11_UNORM_BLOCKFormatEAC_R11_SNORM_BLOCKFormatEAC_R11G11_UNORM_BLOCKFormatEAC_R11G11_SNORM_BLOCKFormatASTC_4x4_UNORM_BLOCKFormatASTC_4x4_SRGB_BLOCKFormatASTC_5x4_UNORM_BLOCKFormatASTC_5x4_SRGB_BLOCKFormatASTC_5x5_UNORM_BLOCKFormatASTC_5x5_SRGB_BLOCKFormatASTC_6x5_UNORM_BLOCKFormatASTC_6x5_SRGB_BLOCKFormatASTC_6x6_UNORM_BLOCKFormatASTC_6x6_SRGB_BLOCKFormatASTC_8x5_UNORM_BLOCKFormatASTC_8x5_SRGB_BLOCKFormatASTC_8x6_UNORM_BLOCKFormatASTC_8x6_SRGB_BLOCKFormatASTC_8x8_UNORM_BLOCKFormatASTC_8x8_SRGB_BLOCKFormatASTC_10x5_UNORM_BLOCKFormatASTC_10x5_SRGB_BLOCKFormatASTC_10x6_UNORM_BLOCKFormatASTC_10x6_SRGB_BLOCKFormatASTC_10x8_UNORM_BLOCKFormatASTC_10x8_SRGB_BLOCKFormatASTC_10x10_UNORM_BLOCKFormatASTC_10x10_SRGB_BLOCKFormatASTC_12x10_UNORM_BLOCKFormatASTC_12x10_SRGB_BLOCKFormatASTC_12x12_UNORM_BLOCKFormatASTC_12x12_SRGB_BLOCK"

var _Format_index = [...]uint16{0, 15, 37, 64, 91, 116, 141, 168, 195, 222, 236, 250, 266, 282, 295, 308, 321, 337, 353, 371, 389, 404, 419, 434, 452, 470, 490, 510, 527, 544, 561, 579, 597, 617, 637, 654, 671, 688, 708, 728, 750, 772, 791, 810, 829, 849, 869, 891, 913, 932, 951, 970, 997, 1024, 1053, 1082, 1108, 1134, 1160, 1190, 1220, 1252, 1284, 1313, 1342, 1372, 1402, 1434, 1466, 1495, 1524, 1539, 1554, 1571, 1588, 1602, 1616, 1632, 1650, 1668, 1688, 1708, 1725, 1742, 1761, 1782, 1803, 1826, 1849, 1869, 1889, 1911, 1935, 1959, 1985, 2011, 2034, 2057, 2082, 2096, 2110, 2126, 2143, 2160, 2179, 2199, 2219, 2241, 2264, 2287, 2312, 2326, 2340, 2356, 2373, 2390, 2409, 2429, 2449, 2471, 2494, 2517, 2542, 2571, 2599, 2614, 2639, 2655, 2668, 2691, 2714, 2738, 2763, 2787, 2813, 2838, 2859, 2879, 2900, 2920, 2941, 2962, 2983, 3004, 3027, 3050, 3071, 3091, 3120, 3148, 3179, 3209, 3240, 3270, 3295, 3320, 3348, 3376, 3402, 3427, 3453, 3478, 3504, 3529, 3555, 3580, 3606, 3631, 3657, 3682, 3708, 3733, 3759, 3784, 3811, 3837, 3864, 3890, 3917, 3943, 3971, 3998, 4026, 4053, 4081, 4108}

func (i Format) String() string {
	if i >= Format(len(_Format_index)-1) {
		return "Format(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Format_name[_Format_index[i]:_Format_index[i+1]]
}

const _StructureType_name = "StructureTypeApplicationInfoStructureTypeInstanceCreateInfoStructureTypeDeviceQueueCreateInfoStructureTypeDeviceCreateInfoStructureTypeSubmitInfoStructureTypeMemoryAllocateInfoStructureTypeMappedMemoryRangeStructureTypeBindSparseInfoStructureTypeFenceCreateInfoStructureTypeSemaphoreCreateInfoStructureTypeEventCreateInfoStructureTypeQueryPoolCreateInfoStructureTypeBufferCreateInfoStructureTypeBufferViewCreateInfoStructureTypeImageCreateInfoStructureTypeImageViewCreateInfoStructureTypeShaderModuleCreateInfoStructureTypePipelineCacheCreateInfoStructureTypePipelineShaderStageCreateInfoStructureTypePipelineVertexInputStateCreateInfoStructureTypePipelineInputAssemblyStateCreateInfoStructureTypePipelineTessellationStateCreateInfoStructureTypePipelineViewportStateCreateInfoStructureTypePipelineRasterizationStateCreateInfoStructureTypePipelineMultisampleStateCreateInfoStructureTypePipelineDepthStencilStateCreateInfoStructureTypePipelineColorBlendStateCreateInfoStructureTypePipelineDynamicStateCreateInfoStructureTypeGraphicsPipelineCreateInfoStructureTypeComputePipelineCreateInfoStructureTypePipelineLayoutCreateInfoStructureTypeSamplerCreateInfoStructureTypeDescriptorSetLayoutCreateInfoStructureTypeDescriptorPoolCreateInfoStructureTypeDescriptorSetAllocateInfoStructureTypeWriteDescriptorSetStructureTypeCopyDescriptorSetStructureTypeFramebufferCreateInfoStructureTypeRenderPassCreateInfoStructureTypeCommandPoolCreateInfoStructureTypeCommandBufferAllocateInfoStructureTypeCommandBufferInheritanceInfoStructureTypeCommandBufferBeginInfoStructureTypeRenderPassBeginInfoStructureTypeBufferMemoryBarrierStructureTypeImageMemoryBarrierStructureTypeMemoryBarrierStructureTypeLoaderInstanceCreateInfoStructureTypeLoaderDeviceCreateInfoStructureTypeSwapchainCreateInfoKHRStructureTypePresentInfoKHRStructureTypeDisplayModeCreateInfoKHRStructureTypeDisplaySurfaceCreateInfoKHRStructureTypeDisplayPresentInfoKHRStructureTypeXlibSurfaceCreateInfoKHRStructureTypeXcbSurfaceCreateInfoKHRStructureTypeWaylandSurfaceCreateInfoKHRStructureTypeMirSurfaceCreateInfoKHRStructureTypeAndroidSurfaceCreateInfoKHRStructureTypeWin32SurfaceCreateInfoKHRStructureTypeDebugReportCallbackCreateInfoEXTStructureTypePipelineRasterizationStateRasterizationOrderAMDStructureTypeDebugMarkerObjectNameInfoEXTStructureTypeDebugMarkerObjectTagInfoEXTStructureTypeDebugMarkerMarkerInfoEXTStructureTypeDedicatedAllocationImageCreateInfoNVStructureTypeDedicatedAllocationBufferCreateInfoNVStructureTypeDedicatedAllocationMemoryAllocateInfoNVStructureTypeTextureLodGatherFormatPropertiesAMDStructureTypePhysicalDeviceCornerSampledImageFeaturesNVStructureTypeRenderPassMultiviewCreateInfoStructureTypePhysicalDeviceMultiviewFeaturesStructureTypePhysicalDeviceMultiviewPropertiesStructureTypeExternalMemoryImageCreateInfoNVStructureTypeExportMemoryAllocateInfoNVStructureTypeImportMemoryWin32HandleInfoNVStructureTypeExportMemoryWin32HandleInfoNVStructureTypeWin32KeyedMutexAcquireReleaseInfoNVStructureTypePhysicalDeviceFeatures2StructureTypePhysicalDeviceProperties2StructureTypeFormatProperties2StructureTypeImageFormatProperties2StructureTypePhysicalDeviceImageFormatInfo2StructureTypeQueueFamilyProperties2StructureTypePhysicalDeviceMemoryProperties2StructureTypeSparseImageFormatProperties2StructureTypePhysicalDeviceSparseImageFormatInfo2StructureTypeMemoryAllocateFlagsInfoKHRStructureTypeDeviceGroupRenderPassBeginInfoKHRStructureTypeDeviceGroupCommandBufferBeginInfoKHRStructureTypeDeviceGroupSubmitInfoKHRStructureTypeDeviceGroupBindSparseInfoKHRStructureTypeDeviceGroupPresentCapabilitiesKHRStructureTypeImageSwapchainCreateInfoKHRStructureTypeBindImageMemorySwapchainInfoKHRStructureTypeAcquireNextImageInfoKHRStructureTypeDeviceGroupPresentInfoKHRStructureTypeDeviceGroupSwapchainCreateInfoKHRStructureTypeBindBufferMemoryDeviceGroupInfoKHRStructureTypeBindImageMemoryDeviceGroupInfoKHRStructureTypeValidationFlagsEXTStructureTypeViSurfaceCreateInfoNNStructureTypePhysicalDeviceShaderDrawParameterFeaturesStructureTypeImageViewAstcDecodeModeEXTStructureTypePhysicalDeviceAstcDecodeFeaturesEXTStructureTypePhysicalDeviceGroupPropertiesKHRStructureTypeDeviceGroupDeviceCreateInfoKHRStructureTypePhysicalDeviceExternalImageFormatInfoStructureTypeExternalImageFormatPropertiesStructureTypePhysicalDeviceExternalBufferInfoStructureTypeExternalBufferPropertiesStructureTypePhysicalDeviceIdPropertiesStructureTypeExternalMemoryBufferCreateInfoStructureTypeExternalMemoryImageCreateInfoStructureTypeExportMemoryAllocateInfoStructureTypeImportMemoryWin32HandleInfoKHRStructureTypeExportMemoryWin32HandleInfoKHRStructureTypeMemoryWin32HandlePropertiesKHRStructureTypeMemoryGetWin32HandleInfoKHRStructureTypeImportMemoryFdInfoKHRStructureTypeMemoryFdPropertiesKHRStructureTypeMemoryGetFdInfoKHRStructureTypeWin32KeyedMutexAcquireReleaseInfoKHRStructureTypePhysicalDeviceExternalSemaphoreInfoStructureTypeExternalSemaphorePropertiesStructureTypeExportSemaphoreCreateInfoStructureTypeImportSemaphoreWin32HandleInfoKHRStructureTypeExportSemaphoreWin32HandleInfoKHRStructureTypeD3D12FenceSubmitInfoKHRStructureTypeSemaphoreGetWin32HandleInfoKHRStructureTypeImportSemaphoreFdInfoKHRStructureTypeSemaphoreGetFdInfoKHRStructureTypePhysicalDevicePushDescriptorPropertiesKHRStructureTypeCommandBufferInheritanceConditionalRenderingInfoEXTStructureTypePhysicalDeviceConditionalRenderingFeaturesEXTStructureTypeConditionalRenderingBeginInfoEXTStructureTypePhysicalDevice16BitStorageFeaturesKHRStructureTypePresentRegionsKHRStructureTypeDescriptorUpdateTemplateCreateINFOStructureTypeObjectTableCreateInfoNVXStructureTypeIndirectCommandsLayoutCreateInfoNVXStructureTypeCmdProcessCommandsInfoNVXStructureTypeCmdReserveSpaceForCommandsInfoNVXStructureTypeDeviceGeneratedCommandsLimitsNVXStructureTypeDeviceGeneratedCommandsFeaturesNVXStructureTypePipelineViewportWScalingStateCreateInfoNVStructureTypeSurfaceCapabilities2EXTStructureTypeDisplayPowerInfoEXTStructureTypeDeviceEventInfoEXTStructureTypeDisplayEventInfoEXTStructureTypeSwapchainCounterCreateInfoEXTStructureTypePresentTimesInfoGoogleStructureTypePhysicalDeviceSubgroupPropertiesStructureTypePhysicalDeviceMultiviewPerViewAttributesPropertiesNVXStructureTypePipelineViewportSwizzleStateCreateInfoNVStructureTypePhysicalDeviceDiscardRectanglePropertiesEXTStructureTypePipelineDiscardRectangleStateCreateInfoEXTStructureTypePhysicalDeviceConservativeRasterizationPropertiesEXTStructureTypePipelineRasterizationConservativeStateCreateInfoEXTStructureTypeHdrMetadataEXTStructureTypeAttachmentDescription2KHRStructureTypeAttachmentReference2KHRStructureTypeSubpassDescription2KHRStructureTypeSubpassDependency2KHRStructureTypeRenderPassCreateInfo2KHRStructureTypeSubpassBeginInfoKHRStructureTypeSubpassEndInfoKHRStructureTypeSharedPresentSurfaceCapabilitiesKHRStructureTypePhysicalDeviceExternalFenceInfoStructureTypeExternalFencePropertiesStructureTypeExportFenceCreateInfoStructureTypeImportFenceWin32HandleInfoKHRStructureTypeExportFenceWin32HandleInfoKHRStructureTypeFenceGetWin32HandleInfoKHRStructureTypeImportFenceFdInfoKHRStructureTypeFenceGetFdInfoKHRStructureTypePhysicalDevicePointClippingPropertiesStructureTypeRenderPassInputAttachmentAspectCreateInfoStructureTypeImageViewUsageCreateInfoStructureTypePipelineTessellationDomainOriginStateCreateInfoStructureTypePhysicalDeviceSurfaceInfo2KHRStructureTypeSurfaceCapabilities2KHRStructureTypeSurfaceFormat2KHRStructureTypePhysicalDeviceVariablePointerFeaturesStructureTypeDisplayProperties2KHRStructureTypeDisplayPlaneProperties2KHRStructureTypeDisplayModeProperties2KHRStructureTypeDisplayPlaneInfo2KHRStructureTypeDisplayPlaneCapabilities2KHRStructureTypeIosSurfaceCreateInfoMVKStructureTypeMacosSurfaceCreateInfoMVKStructureTypeMemoryDedicatedRequirementsKHRStructureTypeMemoryDedicatedAllocateInfoKHRStructureTypeDebugUtilsObjectNameInfoEXTStructureTypeDebugUtilsObjectTagInfoEXTStructureTypeDebugUtilsLabelEXTStructureTypeDebugUtilsMessengerCallbackDataEXTStructureTypeDebugUtilsMessengerCreateInfoEXTStructureTypeAndroidHardwareBufferUsageAndroidStructureTypeAndroidHardwareBufferPropertiesAndroidStructureTypeAndroidHardwareBufferFormatPropertiesAndroidStructureTypeImportAndroidHardwareBufferInfoAndroidStructureTypeMemoryGetAndroidHardwareBufferInfoAndroidStructureTypeExternalFormatAndroidStructureTypePhysicalDeviceSamplerFilterMinmaxPropertiesEXTStructureTypeSamplerReductionModeCreateInfoEXTStructureTypePhysicalDeviceInlineUniformBlockFeaturesEXTStructureTypePhysicalDeviceInlineUniformBlockPropertiesEXTStructureTypeWriteDescriptorSetInlineUniformBlockEXTStructureTypeDescriptorPoolInlineUniformBlockCreateInfoEXTStructureTypeSampleLocationsInfoEXTStructureTypeRenderPassSampleLocationsBeginInfoEXTStructureTypePipelineSampleLocationsStateCreateInfoEXTStructureTypePhysicalDeviceSampleLocationsPropertiesEXTStructureTypeMultisamplePropertiesEXTStructureTypeProtectedSubmitInfoStructureTypePhysicalDeviceProtectedMemoryFeaturesStructureTypePhysicalDeviceProtectedMemoryPropertiesStructureTypeDeviceQueueInfo2StructureTypeBufferMemoryRequirementsInfo2StructureTypeImageMemoryRequirementsInfo2StructureTypeImageSparseMemoryRequirementsInfo2StructureTypeMemoryRequirements2StructureTypeSparseImageMemoryRequirements2StructureTypeImageFormatListCreateInfoKHRStructureTypePhysicalDeviceBlendOperationAdvancedFeaturesEXTStructureTypePhysicalDeviceBlendOperationAdvancedPropertiesEXTStructureTypePipelineColorBlendAdvancedStateCreateInfoEXTStructureTypePipelineCoverageToColorStateCreateInfoNVStructureTypePipelineCoverageModulationStateCreateInfoNVStructureTypeSamplerYCbCrConversionCreateInfoStructureTypeSamplerYCbCrConversionINFOStructureTypeBindImagePlaneMemoryINFOStructureTypeImagePlaneMemoryRequirementsInfoStructureTypePhysicalDeviceSamplerYCbCrConversionFeaturesStructureTypeSamplerYCbCrConversionImageFormatPropertiesStructureTypeBindBufferMemoryInfoKHRStructureTypeBindImageMemoryInfoKHRStructureTypeValidationCacheCreateInfoEXTStructureTypeShaderModuleValidationCacheCreateInfoEXTStructureTypeDescriptorSetLayoutBindingFlagsCreateInfoEXTStructureTypePhysicalDeviceDescriptorIndexingFeaturesEXTStructureTypePhysicalDeviceDescriptorIndexingPropertiesEXTStructureTypeDescriptorSetVariableDescriptorCountAllocateInfoExtStructureTypeDescriptorSetVariableDescriptorCountLayoutSupportEXTStructureTypePipelineViewportShadingRateImageStateCreateInfoNVStructureTypePhysicalDeviceShadingRateImageFeaturesNVStructureTypePhysicalDeviceShadingRateImagePropertiesNVStructureTypePipelineViewportCoarseSampleOrderStateCreateInfoNVStructureTypeRaytracingPipelineCreateInfoNVXStructureTypeAccelerationStructureCreateInfoNVXStructureTypeGeometryInstanceNVXStructureTypeGeometryNVXStructureTypeGeometryTrianglesNVXStructureTypeGeometryAABB_NVXStructureTypeBindAccelerationStructureMemoryInfoNVXStructureTypeDescriptorAccelerationStructureInfoNVXStructureTypeAccelerationStructureMemoryRequirementsInfoNVXStructureTypePhysicalDeviceRaytracingPropertiesNVXStructureTypeHitShaderModuleCreateInfoNVXStructureTypePhysicalDeviceRepresentativeFragmentTestFeaturesNVStructureTypePipelineRepresentativeFragmentTestStateCreateInfoNVStructureTypePhysicalDeviceMaintenance3PropertiesStructureTypeDescriptorSetLayoutSupportStructureTypeDeviceQueueGlobalPriorityCreateInfoEXTStructureTypePhysicalDevice8BitStorageFeaturesKHRStructureTypeImportMemoryHostPointerInfoEXTStructureTypeMemoryHostPointerPropertiesEXTStructureTypePhysicalDeviceExternalMemoryHostPropertiesEXTStructureTypePhysicalDeviceShaderCorePropertiesAMDStructureTypePhysicalDeviceVertexAttributeDivisorPropertiesEXTStructureTypePipelineVertexInputDivisorStateCreateInfoEXTStructureTypePhysicalDeviceVertexAttributeDivisorFeaturesEXTStructureTypePhysicalDeviceComputeShaderDerivativesFeatures_NVStructureTypePhysicalDeviceMeshShaderFeaturesNVStructureTypePhysicalDeviceMeshShaderPropertiesNVStructureTypePhysicalDeviceFragmentShaderBarycentricFeaturesNVStructureTypePhysicalDeviceShaderImageFootprintFeaturesNVStructureTypePipelineViewportExclusiveScissorStateCreateInfoNVStructureTypePhysicalDeviceExclusiveScissorFeaturesNVStructureTypeCheckpointDataNVStructureTypeQueueFamilyCheckpointPropertiesNVStructureTypePhysicalDeviceVulkanMemoryModelFeaturesKHR"

var _StructureType_map = map[StructureType]string{
	0:          _StructureType_name[0:28],
	1:          _StructureType_name[28:59],
	2:          _StructureType_name[59:93],
	3:          _StructureType_name[93:122],
	4:          _StructureType_name[122:145],
	5:          _StructureType_name[145:176],
	6:          _StructureType_name[176:206],
	7:          _StructureType_name[206:233],
	8:          _StructureType_name[233:261],
	9:          _StructureType_name[261:293],
	10:         _StructureType_name[293:321],
	11:         _StructureType_name[321:353],
	12:         _StructureType_name[353:382],
	13:         _StructureType_name[382:415],
	14:         _StructureType_name[415:443],
	15:         _StructureType_name[443:475],
	16:         _StructureType_name[475:510],
	17:         _StructureType_name[510:546],
	18:         _StructureType_name[546:588],
	19:         _StructureType_name[588:635],
	20:         _StructureType_name[635:684],
	21:         _StructureType_name[684:732],
	22:         _StructureType_name[732:776],
	23:         _StructureType_name[776:825],
	24:         _StructureType_name[825:872],
	25:         _StructureType_name[872:920],
	26:         _StructureType_name[920:966],
	27:         _StructureType_name[966:1009],
	28:         _StructureType_name[1009:1048],
	29:         _StructureType_name[1048:1086],
	30:         _StructureType_name[1086:1123],
	31:         _StructureType_name[1123:1153],
	32:         _StructureType_name[1153:1195],
	33:         _StructureType_name[1195:1232],
	34:         _StructureType_name[1232:1270],
	35:         _StructureType_name[1270:1301],
	36:         _StructureType_name[1301:1331],
	37:         _StructureType_name[1331:1365],
	38:         _StructureType_name[1365:1398],
	39:         _StructureType_name[1398:1432],
	40:         _StructureType_name[1432:1470],
	41:         _StructureType_name[1470:1511],
	42:         _StructureType_name[1511:1546],
	43:         _StructureType_name[1546:1578],
	44:         _StructureType_name[1578:1610],
	45:         _StructureType_name[1610:1641],
	46:         _StructureType_name[1641:1667],
	47:         _StructureType_name[1667:1704],
	48:         _StructureType_name[1704:1739],
	1000001000: _StructureType_name[1739:1774],
	1000001001: _StructureType_name[1774:1801],
	1000002000: _StructureType_name[1801:1838],
	1000002001: _StructureType_name[1838:1878],
	1000003000: _StructureType_name[1878:1912],
	1000004000: _StructureType_name[1912:1949],
	1000005000: _StructureType_name[1949:1985],
	1000006000: _StructureType_name[1985:2025],
	1000007000: _StructureType_name[2025:2061],
	1000008000: _StructureType_name[2061:2101],
	1000009000: _StructureType_name[2101:2139],
	1000011000: _StructureType_name[2139:2184],
	1000018000: _StructureType_name[2184:2244],
	1000022000: _StructureType_name[2244:2285],
	1000022001: _StructureType_name[2285:2325],
	1000022002: _StructureType_name[2325:2362],
	1000026000: _StructureType_name[2362:2411],
	1000026001: _StructureType_name[2411:2461],
	1000026002: _StructureType_name[2461:2513],
	1000041000: _StructureType_name[2513:2561],
	1000050000: _StructureType_name[2561:2616],
	1000053000: _StructureType_name[2616:2658],
	1000053001: _StructureType_name[2658:2702],
	1000053002: _StructureType_name[2702:2748],
	1000056000: _StructureType_name[2748:2792],
	1000056001: _StructureType_name[2792:2831],
	1000057000: _StructureType_name[2831:2873],
	1000057001: _StructureType_name[2873:2915],
	1000058000: _StructureType_name[2915:2963],
	1000059000: _StructureType_name[2963:2999],
	1000059001: _StructureType_name[2999:3037],
	1000059002: _StructureType_name[3037:3067],
	1000059003: _StructureType_name[3067:3102],
	1000059004: _StructureType_name[3102:3145],
	1000059005: _StructureType_name[3145:3180],
	1000059006: _StructureType_name[3180:3224],
	1000059007: _StructureType_name[3224:3265],
	1000059008: _StructureType_name[3265:3314],
	1000060000: _StructureType_name[3314:3353],
	1000060003: _StructureType_name[3353:3399],
	1000060004: _StructureType_name[3399:3448],
	1000060005: _StructureType_name[3448:3485],
	1000060006: _StructureType_name[3485:3526],
	1000060007: _StructureType_name[3526:3572],
	1000060008: _StructureType_name[3572:3612],
	1000060009: _StructureType_name[3612:3656],
	1000060010: _StructureType_name[3656:3692],
	1000060011: _StructureType_name[3692:3730],
	1000060012: _StructureType_name[3730:3776],
	1000060013: _StructureType_name[3776:3823],
	1000060014: _StructureType_name[3823:3869],
	1000061000: _StructureType_name[3869:3900],
	1000062000: _StructureType_name[3900:3934],
	1000063000: _StructureType_name[3934:3988],
	1000067000: _StructureType_name[3988:4027],
	1000067001: _StructureType_name[4027:4075],
	1000070000: _StructureType_name[4075:4120],
	1000070001: _StructureType_name[4120:4163],
	1000071000: _StructureType_name[4163:4213],
	1000071001: _StructureType_name[4213:4255],
	1000071002: _StructureType_name[4255:4300],
	1000071003: _StructureType_name[4300:4337],
	1000071004: _StructureType_name[4337:4376],
	1000072000: _StructureType_name[4376:4419],
	1000072001: _StructureType_name[4419:4461],
	1000072002: _StructureType_name[4461:4498],
	1000073000: _StructureType_name[4498:4541],
	1000073001: _StructureType_name[4541:4584],
	1000073002: _StructureType_name[4584:4627],
	1000073003: _StructureType_name[4627:4667],
	1000074000: _StructureType_name[4667:4701],
	1000074001: _StructureType_name[4701:4735],
	1000074002: _StructureType_name[4735:4766],
	1000075000: _StructureType_name[4766:4815],
	1000076000: _StructureType_name[4815:4863],
	1000076001: _StructureType_name[4863:4903],
	1000077000: _StructureType_name[4903:4941],
	1000078000: _StructureType_name[4941:4987],
	1000078001: _StructureType_name[4987:5033],
	1000078002: _StructureType_name[5033:5069],
	1000078003: _StructureType_name[5069:5112],
	1000079000: _StructureType_name[5112:5149],
	1000079001: _StructureType_name[5149:5183],
	1000080000: _StructureType_name[5183:5237],
	1000081000: _StructureType_name[5237:5301],
	1000081001: _StructureType_name[5301:5359],
	1000081002: _StructureType_name[5359:5404],
	1000083000: _StructureType_name[5404:5454],
	1000084000: _StructureType_name[5454:5484],
	1000085000: _StructureType_name[5484:5531],
	1000086000: _StructureType_name[5531:5568],
	1000086001: _StructureType_name[5568:5616],
	1000086002: _StructureType_name[5616:5654],
	1000086003: _StructureType_name[5654:5700],
	1000086004: _StructureType_name[5700:5745],
	1000086005: _StructureType_name[5745:5792],
	1000087000: _StructureType_name[5792:5846],
	1000090000: _StructureType_name[5846:5882],
	1000091000: _StructureType_name[5882:5914],
	1000091001: _StructureType_name[5914:5945],
	1000091002: _StructureType_name[5945:5977],
	1000091003: _StructureType_name[5977:6019],
	1000092000: _StructureType_name[6019:6054],
	1000094000: _StructureType_name[6054:6099],
	1000097000: _StructureType_name[6099:6165],
	1000098000: _StructureType_name[6165:6218],
	1000099000: _StructureType_name[6218:6274],
	1000099001: _StructureType_name[6274:6329],
	1000101000: _StructureType_name[6329:6394],
	1000101001: _StructureType_name[6394:6458],
	1000105000: _StructureType_name[6458:6485],
	1000109000: _StructureType_name[6485:6523],
	1000109001: _StructureType_name[6523:6559],
	1000109002: _StructureType_name[6559:6594],
	1000109003: _StructureType_name[6594:6628],
	1000109004: _StructureType_name[6628:6665],
	1000109005: _StructureType_name[6665:6697],
	1000109006: _StructureType_name[6697:6727],
	1000111000: _StructureType_name[6727:6775],
	1000112000: _StructureType_name[6775:6819],
	1000112001: _StructureType_name[6819:6855],
	1000113000: _StructureType_name[6855:6889],
	1000114000: _StructureType_name[6889:6931],
	1000114001: _StructureType_name[6931:6973],
	1000114002: _StructureType_name[6973:7012],
	1000115000: _StructureType_name[7012:7045],
	1000115001: _StructureType_name[7045:7075],
	1000117000: _StructureType_name[7075:7125],
	1000117001: _StructureType_name[7125:7179],
	1000117002: _StructureType_name[7179:7216],
	1000117003: _StructureType_name[7216:7276],
	1000119000: _StructureType_name[7276:7318],
	1000119001: _StructureType_name[7318:7354],
	1000119002: _StructureType_name[7354:7384],
	1000120000: _StructureType_name[7384:7434],
	1000121000: _StructureType_name[7434:7468],
	1000121001: _StructureType_name[7468:7507],
	1000121002: _StructureType_name[7507:7545],
	1000121003: _StructureType_name[7545:7578],
	1000121004: _StructureType_name[7578:7619],
	1000122000: _StructureType_name[7619:7655],
	1000123000: _StructureType_name[7655:7693],
	1000127000: _StructureType_name[7693:7736],
	1000127001: _StructureType_name[7736:7779],
	1000128000: _StructureType_name[7779:7819],
	1000128001: _StructureType_name[7819:7858],
	1000128002: _StructureType_name[7858:7889],
	1000128003: _StructureType_name[7889:7936],
	1000128004: _StructureType_name[7936:7981],
	1000129000: _StructureType_name[7981:8027],
	1000129001: _StructureType_name[8027:8078],
	1000129002: _StructureType_name[8078:8135],
	1000129003: _StructureType_name[8135:8186],
	1000129004: _StructureType_name[8186:8240],
	1000129005: _StructureType_name[8240:8274],
	1000130000: _StructureType_name[8274:8333],
	1000130001: _StructureType_name[8333:8379],
	1000138000: _StructureType_name[8379:8435],
	1000138001: _StructureType_name[8435:8493],
	1000138002: _StructureType_name[8493:8545],
	1000138003: _StructureType_name[8545:8603],
	1000143000: _StructureType_name[8603:8638],
	1000143001: _StructureType_name[8638:8688],
	1000143002: _StructureType_name[8688:8742],
	1000143003: _StructureType_name[8742:8797],
	1000143004: _StructureType_name[8797:8834],
	1000145000: _StructureType_name[8834:8866],
	1000145001: _StructureType_name[8866:8916],
	1000145002: _StructureType_name[8916:8968],
	1000145003: _StructureType_name[8968:8997],
	1000146000: _StructureType_name[8997:9039],
	1000146001: _StructureType_name[9039:9080],
	1000146002: _StructureType_name[9080:9127],
	1000146003: _StructureType_name[9127:9159],
	1000146004: _StructureType_name[9159:9202],
	1000147000: _StructureType_name[9202:9243],
	1000148000: _StructureType_name[9243:9303],
	1000148001: _StructureType_name[9303:9365],
	1000148002: _StructureType_name[9365:9422],
	1000149000: _StructureType_name[9422:9475],
	1000152000: _StructureType_name[9475:9531],
	1000156000: _StructureType_name[9531:9576],
	1000156001: _StructureType_name[9576:9615],
	1000156002: _StructureType_name[9615:9652],
	1000156003: _StructureType_name[9652:9697],
	1000156004: _StructureType_name[9697:9754],
	1000156005: _StructureType_name[9754:9810],
	1000157000: _StructureType_name[9810:9846],
	1000157001: _StructureType_name[9846:9881],
	1000160000: _StructureType_name[9881:9922],
	1000160001: _StructureType_name[9922:9975],
	1000161000: _StructureType_name[9975:10032],
	1000161001: _StructureType_name[10032:10088],
	1000161002: _StructureType_name[10088:10146],
	1000161003: _StructureType_name[10146:10210],
	1000161004: _StructureType_name[10210:10275],
	1000164000: _StructureType_name[10275:10337],
	1000164001: _StructureType_name[10337:10390],
	1000164002: _StructureType_name[10390:10445],
	1000164005: _StructureType_name[10445:10508],
	1000165000: _StructureType_name[10508:10552],
	1000165001: _StructureType_name[10552:10599],
	1000165002: _StructureType_name[10599:10631],
	1000165003: _StructureType_name[10631:10655],
	1000165004: _StructureType_name[10655:10688],
	1000165005: _StructureType_name[10688:10717],
	1000165006: _StructureType_name[10717:10768],
	1000165007: _StructureType_name[10768:10819],
	1000165008: _StructureType_name[10819:10878],
	1000165009: _StructureType_name[10878:10928],
	1000165010: _StructureType_name[10928:10969],
	1000166000: _StructureType_name[10969:11032],
	1000166001: _StructureType_name[11032:11096],
	1000168000: _StructureType_name[11096:11145],
	1000168001: _StructureType_name[11145:11184],
	1000174000: _StructureType_name[11184:11235],
	1000177000: _StructureType_name[11235:11284],
	1000178000: _StructureType_name[11284:11327],
	1000178001: _StructureType_name[11327:11370],
	1000178002: _StructureType_name[11370:11428],
	1000185000: _StructureType_name[11428:11478],
	1000190000: _StructureType_name[11478:11540],
	1000190001: _StructureType_name[11540:11597],
	1000190002: _StructureType_name[11597:11657],
	1000201000: _StructureType_name[11657:11719],
	1000202000: _StructureType_name[11719:11766],
	1000202001: _StructureType_name[11766:11815],
	1000203000: _StructureType_name[11815:11877],
	1000204000: _StructureType_name[11877:11934],
	1000205000: _StructureType_name[11934:11996],
	1000205002: _StructureType_name[11996:12049],
	1000206000: _StructureType_name[12049:12078],
	1000206001: _StructureType_name[12078:12124],
	1000211000: _StructureType_name[12124:12179],
}

func (i StructureType) String() string {
	if str, ok := _StructureType_map[i]; ok {
		return str
	}
	return "StructureType(" + strconv.FormatInt(int64(i), 10) + ")"
}

const _Result_name = "ErrNotPermittedEXTErrFragmentationEXTErrInvalidExternalHandleErrOutOfPoolMemoryErrInvalidShaderNVErrValidationFailedEXTErrIncompatibleDisplayKHRErrOutOfDateKHRErrNativeWindowInUseKHRErrSurfaceLostKHRErrFragmentedPoolErrFormatNotSupportedErrTooManyObjectsErrIncompatibleDriverErrFeatureNotPresentErrExtensionNotPresentErrLayerNotPresentErrMemoryMapFailedErrDeviceLostErrInitializationFailedErrOutOfDeviceMemoryErrOutOfHostMemorySuccessNotReadyTimeoutEventSetEventResetIncompleteSuboptimalKHR"

var _Result_map = map[Result]string{
	-1000174001: _Result_name[0:18],
	-1000161000: _Result_name[18:37],
	-1000072003: _Result_name[37:61],
	-1000069000: _Result_name[61:79],
	-1000012000: _Result_name[79:97],
	-1000011001: _Result_name[97:119],
	-1000003001: _Result_name[119:144],
	-1000001004: _Result_name[144:159],
	-1000000001: _Result_name[159:182],
	-1000000000: _Result_name[182:199],
	-12:         _Result_name[199:216],
	-11:         _Result_name[216:237],
	-10:         _Result_name[237:254],
	-9:          _Result_name[254:275],
	-8:          _Result_name[275:295],
	-7:          _Result_name[295:317],
	-6:          _Result_name[317:335],
	-5:          _Result_name[335:353],
	-4:          _Result_name[353:366],
	-3:          _Result_name[366:389],
	-2:          _Result_name[389:409],
	-1:          _Result_name[409:427],
	0:           _Result_name[427:434],
	1:           _Result_name[434:442],
	2:           _Result_name[442:449],
	3:           _Result_name[449:457],
	4:           _Result_name[457:467],
	5:           _Result_name[467:477],
	1000001003:  _Result_name[477:490],
}

func (i Result) String() string {
	if str, ok := _Result_map[i]; ok {
		return str
	}
	return "Result(" + strconv.FormatInt(int64(i), 10) + ")"
}

const _PhysicalDeviceType_name = "PhysicalDeviceTypeOtherPhysicalDeviceTypeIntegratedGPUPhysicalDeviceTypeDiscreteGPUPhysicalDeviceTypeVirtualGPUPhysicalDeviceTypeCPU"

var _PhysicalDeviceType_index = [...]uint8{0, 23, 54, 83, 111, 132}

func (i PhysicalDeviceType) String() string {
	if i >= PhysicalDeviceType(len(_PhysicalDeviceType_index)-1) {
		return "PhysicalDeviceType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _PhysicalDeviceType_name[_PhysicalDeviceType_index[i]:_PhysicalDeviceType_index[i+1]]
}

const _SharingMode_name = "SharingModeExclusiveSharingModeConcurrent"

var _SharingMode_index = [...]uint8{0, 20, 41}

func (i SharingMode) String() string {
	if i >= SharingMode(len(_SharingMode_index)-1) {
		return "SharingMode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SharingMode_name[_SharingMode_index[i]:_SharingMode_index[i+1]]
}

const _ImageViewType_name = "ImageViewType1DImageViewType2DImageViewType3DImageViewTypeCubeImageViewType1DArrayImageViewType2DArrayImageViewTypeCubeArray"

var _ImageViewType_index = [...]uint8{0, 15, 30, 45, 62, 82, 102, 124}

func (i ImageViewType) String() string {
	if i >= ImageViewType(len(_ImageViewType_index)-1) {
		return "ImageViewType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ImageViewType_name[_ImageViewType_index[i]:_ImageViewType_index[i+1]]
}

const _ComponentSwizzle_name = "ComponentSwizzleIdentityComponentSwizzleZeroComponentSwizzleOneComponentSwizzleRComponentSwizzleGComponentSwizzleBComponentSwizzleA"

var _ComponentSwizzle_index = [...]uint8{0, 24, 44, 63, 80, 97, 114, 131}

func (i ComponentSwizzle) String() string {
	if i >= ComponentSwizzle(len(_ComponentSwizzle_index)-1) {
		return "ComponentSwizzle(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ComponentSwizzle_name[_ComponentSwizzle_index[i]:_ComponentSwizzle_index[i+1]]
}

const _VertexInputRate_name = "VertexInputRateVertexVertexInputRateInstance"

var _VertexInputRate_index = [...]uint8{0, 21, 44}

func (i VertexInputRate) String() string {
	if i >= VertexInputRate(len(_VertexInputRate_index)-1) {
		return "VertexInputRate(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _VertexInputRate_name[_VertexInputRate_index[i]:_VertexInputRate_index[i+1]]
}

const _PrimitiveTopology_name = "PrimitiveTopologyPointListPrimitiveTopologyLineListPrimitiveTopologyLineStripPrimitiveTopologyTriangleListPrimitiveTopologyTriangleStripPrimitiveTopologyTriangleFanPrimitiveTopologyLineListWithAdjacencyPrimitiveTopologyLineStripWithAdjacencyPrimitiveTopologyTriangleListWithAdjacencyPrimitiveTopologyTriangleStripWithAdjacencyPrimitiveTopologyPatchList"

var _PrimitiveTopology_index = [...]uint16{0, 26, 51, 77, 106, 136, 164, 202, 241, 283, 326, 352}

func (i PrimitiveTopology) String() string {
	if i >= PrimitiveTopology(len(_PrimitiveTopology_index)-1) {
		return "PrimitiveTopology(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _PrimitiveTopology_name[_PrimitiveTopology_index[i]:_PrimitiveTopology_index[i+1]]
}

const (
	_PolygonMode_name_0 = "PolygonModeFillPolygonModeLinePolygonModePoint"
	_PolygonMode_name_1 = "PolygonModeFillRectangleNV"
)

var (
	_PolygonMode_index_0 = [...]uint8{0, 15, 30, 46}
)

func (i PolygonMode) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _PolygonMode_name_0[_PolygonMode_index_0[i]:_PolygonMode_index_0[i+1]]
	case i == 1000153000:
		return _PolygonMode_name_1
	default:
		return "PolygonMode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const _FrontFace_name = "FrontFaceCounterClockwiseFrontFaceClockwise"

var _FrontFace_index = [...]uint8{0, 25, 43}

func (i FrontFace) String() string {
	if i >= FrontFace(len(_FrontFace_index)-1) {
		return "FrontFace(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _FrontFace_name[_FrontFace_index[i]:_FrontFace_index[i+1]]
}

const _BlendFactor_name = "BlendFactorZeroBlendFactorOneBlendFactorSrcColorBlendFactorOneMinusSrcColorBlendFactorDstColorBlendFactorOneMinusDstColorBlendFactorSrcAlphaBlendFactorOneMinusSrcAlphaBlendFactorDstAlphaBlendFactorOneMinusDstAlphaBlendFactorConstantColorBlendFactorOneMinusConstantColorBlendFactorConstantAlphaBlendFactorOneMinusConstantAlphaBlendFactorSrcAlphaSaturateBlendFactorSrc1ColorBlendFactorOneMinusSrc1ColorBlendFactorSrc1AlphaBlendFactorOneMinusSrc1Alpha"

var _BlendFactor_index = [...]uint16{0, 15, 29, 48, 75, 94, 121, 140, 167, 186, 213, 237, 269, 293, 325, 352, 372, 400, 420, 448}

func (i BlendFactor) String() string {
	if i >= BlendFactor(len(_BlendFactor_index)-1) {
		return "BlendFactor(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _BlendFactor_name[_BlendFactor_index[i]:_BlendFactor_index[i+1]]
}

const (
	_BlendOp_name_0 = "BlendOpAddBlendOpSubtractBlendOpReverseSubtractBlendOpMinBlendOpMax"
	_BlendOp_name_1 = "BlendOpZeroEXTBlendOpSrcEXTBlendOpDstEXTBlendOpSrcOverEXTBlendOpDstOverEXTBlendOpSrcInEXTBlendOpDstInEXTBlendOpSrcOutEXTBlendOpDstOutEXTBlendOpSrcAtopEXTBlendOpDstAtopEXTBlendOpXorEXTBlendOpMultiplyEXTBlendOpScreenEXTBlendOpOverlayEXTBlendOpDarkenEXTBlendOpLightenEXTBlendOpColordodgeEXTBlendOpColorburnEXTBlendOpHardlightEXTBlendOpSoftlightEXTBlendOpDifferenceEXTBlendOpExclusionEXTBlendOpInvertEXTBlendOpInvertRGB_EXTBlendOpLineardodgeEXTBlendOpLinearburnEXTBlendOpVividlightEXTBlendOpLinearlightEXTBlendOpPinlightEXTBlendOpHardmixEXTBlendOpHSLHueEXTBlendOpHSLSaturationEXTBlendOpHSLColorEXTBlendOpHSLLuminosityEXTBlendOpPlusEXTBlendOpPlusClampedEXTBlendOpPlusClampedAlphaEXTBlendOpPlusDarkerEXTBlendOpMinusEXTBlendOpMinusClampedEXTBlendOpContrastEXTBlendOpInvertOVG_EXTBlendOpRedEXTBlendOpGreenEXTBlendOpBlueEXT"
)

var (
	_BlendOp_index_0 = [...]uint8{0, 10, 25, 47, 57, 67}
	_BlendOp_index_1 = [...]uint16{0, 14, 27, 40, 57, 74, 89, 104, 120, 136, 153, 170, 183, 201, 217, 234, 250, 267, 287, 306, 325, 344, 364, 383, 399, 419, 440, 460, 480, 501, 519, 536, 552, 575, 593, 616, 630, 651, 677, 697, 712, 734, 752, 772, 785, 800, 814}
)

func (i BlendOp) String() string {
	switch {
	case 0 <= i && i <= 4:
		return _BlendOp_name_0[_BlendOp_index_0[i]:_BlendOp_index_0[i+1]]
	case 1000148000 <= i && i <= 1000148045:
		i -= 1000148000
		return _BlendOp_name_1[_BlendOp_index_1[i]:_BlendOp_index_1[i+1]]
	default:
		return "BlendOp(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const _LogicOp_name = "LogicOpClearLogicOpAndLogicOpAndReverseLogicOpCopyLogicOpAndInvertedLogicOpNoOpLogicOpXorLogicOpOrLogicOpNorLogicOpEquivalentLogicOpInvertLogicOpOrReverseLogicOpCopyInvertedLogicOpOrInvertedLogicOpNandLogicOpSet"

var _LogicOp_index = [...]uint8{0, 12, 22, 39, 50, 68, 79, 89, 98, 108, 125, 138, 154, 173, 190, 201, 211}

func (i LogicOp) String() string {
	if i >= LogicOp(len(_LogicOp_index)-1) {
		return "LogicOp(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _LogicOp_name[_LogicOp_index[i]:_LogicOp_index[i+1]]
}

const (
	_DynamicState_name_0 = "DynamicStateViewportDynamicStateScissorDynamicStateLineWidthDynamicStateDepthBiasDynamicStateBlendConstantsDynamicStateDepthBoundsDynamicStateStencilCompareMaskDynamicStateStencilWriteMaskDynamicStateStencilReference"
	_DynamicState_name_1 = "DynamicStateViewportWScalingNV"
	_DynamicState_name_2 = "DynamicStateDiscardRectangleEXT"
	_DynamicState_name_3 = "DynamicStateSampleLocationsEXT"
	_DynamicState_name_4 = "DynamicStateViewportShadingRatePaletteNV"
	_DynamicState_name_5 = "DynamicStateViewportCoarseSampleOrderNV"
	_DynamicState_name_6 = "DynamicStateExclusiveScissorNV"
)

var (
	_DynamicState_index_0 = [...]uint8{0, 20, 39, 60, 81, 107, 130, 160, 188, 216}
)

func (i DynamicState) String() string {
	switch {
	case 0 <= i && i <= 8:
		return _DynamicState_name_0[_DynamicState_index_0[i]:_DynamicState_index_0[i+1]]
	case i == 1000087000:
		return _DynamicState_name_1
	case i == 1000099000:
		return _DynamicState_name_2
	case i == 1000143000:
		return _DynamicState_name_3
	case i == 1000164004:
		return _DynamicState_name_4
	case i == 1000164006:
		return _DynamicState_name_5
	case i == 1000205001:
		return _DynamicState_name_6
	default:
		return "DynamicState(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const _CompareOp_name = "CompareOpNeverCompareOpLessCompareOpEqualCompareOpLessOrEqualCompareOpGreaterCompareOpNotEqualCompareOpGreaterOrEqualCompareOpAlways"

var _CompareOp_index = [...]uint8{0, 14, 27, 41, 61, 77, 94, 117, 132}

func (i CompareOp) String() string {
	if i >= CompareOp(len(_CompareOp_index)-1) {
		return "CompareOp(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _CompareOp_name[_CompareOp_index[i]:_CompareOp_index[i+1]]
}

const _StencilOp_name = "StencilOpKeepStencilOpZeroStencilOpReplaceStencilOpIncrementAndClampStencilOpDecrementAndClampStencilOpInvertStencilOpIncrementAndWrapStencilOpDecrementAndWrap"

var _StencilOp_index = [...]uint8{0, 13, 26, 42, 68, 94, 109, 134, 159}

func (i StencilOp) String() string {
	if i >= StencilOp(len(_StencilOp_index)-1) {
		return "StencilOp(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _StencilOp_name[_StencilOp_index[i]:_StencilOp_index[i+1]]
}

const _AttachmentLoadOp_name = "AttachmentLoadOpLoadAttachmentLoadOpClearAttachmentLoadOpDontCare"

var _AttachmentLoadOp_index = [...]uint8{0, 20, 41, 65}

func (i AttachmentLoadOp) String() string {
	if i >= AttachmentLoadOp(len(_AttachmentLoadOp_index)-1) {
		return "AttachmentLoadOp(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _AttachmentLoadOp_name[_AttachmentLoadOp_index[i]:_AttachmentLoadOp_index[i+1]]
}

const _AttachmentStoreOp_name = "AttachmentStoreOpStoreAttachmentStoreOpDontCare"

var _AttachmentStoreOp_index = [...]uint8{0, 22, 47}

func (i AttachmentStoreOp) String() string {
	if i >= AttachmentStoreOp(len(_AttachmentStoreOp_index)-1) {
		return "AttachmentStoreOp(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _AttachmentStoreOp_name[_AttachmentStoreOp_index[i]:_AttachmentStoreOp_index[i+1]]
}

const (
	_ImageLayout_name_0 = "ImageLayoutUndefinedImageLayoutGeneralImageLayoutColorAttachmentOptimalImageLayoutDepthStencilAttachmentOptimalImageLayoutDepthStencilReadOnlyOptimalImageLayoutShaderReadOnlyOptimalImageLayoutTransferSrcOptimalImageLayoutTransferDstOptimalImageLayoutPreinitialized"
	_ImageLayout_name_1 = "ImageLayoutPresentSrcKHR"
	_ImageLayout_name_2 = "ImageLayoutSharedPresentKHR"
	_ImageLayout_name_3 = "ImageLayoutDepthReadOnlyStencilAttachmentOptimalImageLayoutDepthAttachmentStencilReadOnlyOptimal"
	_ImageLayout_name_4 = "ImageLayoutShadingRateOptimalNV"
)

var (
	_ImageLayout_index_0 = [...]uint16{0, 20, 38, 71, 111, 149, 181, 210, 239, 264}
	_ImageLayout_index_3 = [...]uint8{0, 48, 96}
)

func (i ImageLayout) String() string {
	switch {
	case 0 <= i && i <= 8:
		return _ImageLayout_name_0[_ImageLayout_index_0[i]:_ImageLayout_index_0[i+1]]
	case i == 1000001002:
		return _ImageLayout_name_1
	case i == 1000111000:
		return _ImageLayout_name_2
	case 1000117000 <= i && i <= 1000117001:
		i -= 1000117000
		return _ImageLayout_name_3[_ImageLayout_index_3[i]:_ImageLayout_index_3[i+1]]
	case i == 1000164003:
		return _ImageLayout_name_4
	default:
		return "ImageLayout(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const (
	_PipelineBindPoint_name_0 = "PipelineBindPointGraphicsPipelineBindPointCompute"
	_PipelineBindPoint_name_1 = "PipelineBindPointRaytracingNVX"
)

var (
	_PipelineBindPoint_index_0 = [...]uint8{0, 25, 49}
)

func (i PipelineBindPoint) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _PipelineBindPoint_name_0[_PipelineBindPoint_index_0[i]:_PipelineBindPoint_index_0[i+1]]
	case i == 1000165000:
		return _PipelineBindPoint_name_1
	default:
		return "PipelineBindPoint(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const _SubpassContents_name = "SubpassContentsInlineSubpassContentsSecondaryCommandBuffers"

var _SubpassContents_index = [...]uint8{0, 21, 59}

func (i SubpassContents) String() string {
	if i >= SubpassContents(len(_SubpassContents_index)-1) {
		return "SubpassContents(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SubpassContents_name[_SubpassContents_index[i]:_SubpassContents_index[i+1]]
}
